
Labb 5.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006298  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080063d4  080063d4  000163d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006524  08006524  00016524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800652c  0800652c  0001652c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006530  08006530  00016530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000004  08006534  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004c0  20000010  08006540  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200004d0  08006540  000204d0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020e76  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000037da  00000000  00000000  00040eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002098  00000000  00000000  00044690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001f50  00000000  00000000  00046728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00025236  00000000  00000000  00048678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dfe2  00000000  00000000  0006d8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f3616  00000000  00000000  0008b890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0017eea6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008dac  00000000  00000000  0017eefc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	080063bc 	.word	0x080063bc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	080063bc 	.word	0x080063bc

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b96e 	b.w	8000480 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9d08      	ldr	r5, [sp, #32]
 80001c2:	4604      	mov	r4, r0
 80001c4:	468c      	mov	ip, r1
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	f040 8083 	bne.w	80002d2 <__udivmoddi4+0x116>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4617      	mov	r7, r2
 80001d0:	d947      	bls.n	8000262 <__udivmoddi4+0xa6>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b142      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d8:	f1c2 0020 	rsb	r0, r2, #32
 80001dc:	fa24 f000 	lsr.w	r0, r4, r0
 80001e0:	4091      	lsls	r1, r2
 80001e2:	4097      	lsls	r7, r2
 80001e4:	ea40 0c01 	orr.w	ip, r0, r1
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbbc f6f8 	udiv	r6, ip, r8
 80001f4:	fa1f fe87 	uxth.w	lr, r7
 80001f8:	fb08 c116 	mls	r1, r8, r6, ip
 80001fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000200:	fb06 f10e 	mul.w	r1, r6, lr
 8000204:	4299      	cmp	r1, r3
 8000206:	d909      	bls.n	800021c <__udivmoddi4+0x60>
 8000208:	18fb      	adds	r3, r7, r3
 800020a:	f106 30ff 	add.w	r0, r6, #4294967295
 800020e:	f080 8119 	bcs.w	8000444 <__udivmoddi4+0x288>
 8000212:	4299      	cmp	r1, r3
 8000214:	f240 8116 	bls.w	8000444 <__udivmoddi4+0x288>
 8000218:	3e02      	subs	r6, #2
 800021a:	443b      	add	r3, r7
 800021c:	1a5b      	subs	r3, r3, r1
 800021e:	b2a4      	uxth	r4, r4
 8000220:	fbb3 f0f8 	udiv	r0, r3, r8
 8000224:	fb08 3310 	mls	r3, r8, r0, r3
 8000228:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	45a6      	cmp	lr, r4
 8000232:	d909      	bls.n	8000248 <__udivmoddi4+0x8c>
 8000234:	193c      	adds	r4, r7, r4
 8000236:	f100 33ff 	add.w	r3, r0, #4294967295
 800023a:	f080 8105 	bcs.w	8000448 <__udivmoddi4+0x28c>
 800023e:	45a6      	cmp	lr, r4
 8000240:	f240 8102 	bls.w	8000448 <__udivmoddi4+0x28c>
 8000244:	3802      	subs	r0, #2
 8000246:	443c      	add	r4, r7
 8000248:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800024c:	eba4 040e 	sub.w	r4, r4, lr
 8000250:	2600      	movs	r6, #0
 8000252:	b11d      	cbz	r5, 800025c <__udivmoddi4+0xa0>
 8000254:	40d4      	lsrs	r4, r2
 8000256:	2300      	movs	r3, #0
 8000258:	e9c5 4300 	strd	r4, r3, [r5]
 800025c:	4631      	mov	r1, r6
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	b902      	cbnz	r2, 8000266 <__udivmoddi4+0xaa>
 8000264:	deff      	udf	#255	; 0xff
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	2a00      	cmp	r2, #0
 800026c:	d150      	bne.n	8000310 <__udivmoddi4+0x154>
 800026e:	1bcb      	subs	r3, r1, r7
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f f887 	uxth.w	r8, r7
 8000278:	2601      	movs	r6, #1
 800027a:	fbb3 fcfe 	udiv	ip, r3, lr
 800027e:	0c21      	lsrs	r1, r4, #16
 8000280:	fb0e 331c 	mls	r3, lr, ip, r3
 8000284:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000288:	fb08 f30c 	mul.w	r3, r8, ip
 800028c:	428b      	cmp	r3, r1
 800028e:	d907      	bls.n	80002a0 <__udivmoddi4+0xe4>
 8000290:	1879      	adds	r1, r7, r1
 8000292:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000296:	d202      	bcs.n	800029e <__udivmoddi4+0xe2>
 8000298:	428b      	cmp	r3, r1
 800029a:	f200 80e9 	bhi.w	8000470 <__udivmoddi4+0x2b4>
 800029e:	4684      	mov	ip, r0
 80002a0:	1ac9      	subs	r1, r1, r3
 80002a2:	b2a3      	uxth	r3, r4
 80002a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002b0:	fb08 f800 	mul.w	r8, r8, r0
 80002b4:	45a0      	cmp	r8, r4
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0x10c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x10a>
 80002c0:	45a0      	cmp	r8, r4
 80002c2:	f200 80d9 	bhi.w	8000478 <__udivmoddi4+0x2bc>
 80002c6:	4618      	mov	r0, r3
 80002c8:	eba4 0408 	sub.w	r4, r4, r8
 80002cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002d0:	e7bf      	b.n	8000252 <__udivmoddi4+0x96>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0x12e>
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	f000 80b1 	beq.w	800043e <__udivmoddi4+0x282>
 80002dc:	2600      	movs	r6, #0
 80002de:	e9c5 0100 	strd	r0, r1, [r5]
 80002e2:	4630      	mov	r0, r6
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f683 	clz	r6, r3
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d14a      	bne.n	8000388 <__udivmoddi4+0x1cc>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0x140>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80b8 	bhi.w	800046c <__udivmoddi4+0x2b0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	468c      	mov	ip, r1
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0a8      	beq.n	800025c <__udivmoddi4+0xa0>
 800030a:	e9c5 4c00 	strd	r4, ip, [r5]
 800030e:	e7a5      	b.n	800025c <__udivmoddi4+0xa0>
 8000310:	f1c2 0320 	rsb	r3, r2, #32
 8000314:	fa20 f603 	lsr.w	r6, r0, r3
 8000318:	4097      	lsls	r7, r2
 800031a:	fa01 f002 	lsl.w	r0, r1, r2
 800031e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000322:	40d9      	lsrs	r1, r3
 8000324:	4330      	orrs	r0, r6
 8000326:	0c03      	lsrs	r3, r0, #16
 8000328:	fbb1 f6fe 	udiv	r6, r1, lr
 800032c:	fa1f f887 	uxth.w	r8, r7
 8000330:	fb0e 1116 	mls	r1, lr, r6, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb06 f108 	mul.w	r1, r6, r8
 800033c:	4299      	cmp	r1, r3
 800033e:	fa04 f402 	lsl.w	r4, r4, r2
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x19c>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f106 3cff 	add.w	ip, r6, #4294967295
 800034a:	f080 808d 	bcs.w	8000468 <__udivmoddi4+0x2ac>
 800034e:	4299      	cmp	r1, r3
 8000350:	f240 808a 	bls.w	8000468 <__udivmoddi4+0x2ac>
 8000354:	3e02      	subs	r6, #2
 8000356:	443b      	add	r3, r7
 8000358:	1a5b      	subs	r3, r3, r1
 800035a:	b281      	uxth	r1, r0
 800035c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000360:	fb0e 3310 	mls	r3, lr, r0, r3
 8000364:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000368:	fb00 f308 	mul.w	r3, r0, r8
 800036c:	428b      	cmp	r3, r1
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x1c4>
 8000370:	1879      	adds	r1, r7, r1
 8000372:	f100 3cff 	add.w	ip, r0, #4294967295
 8000376:	d273      	bcs.n	8000460 <__udivmoddi4+0x2a4>
 8000378:	428b      	cmp	r3, r1
 800037a:	d971      	bls.n	8000460 <__udivmoddi4+0x2a4>
 800037c:	3802      	subs	r0, #2
 800037e:	4439      	add	r1, r7
 8000380:	1acb      	subs	r3, r1, r3
 8000382:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000386:	e778      	b.n	800027a <__udivmoddi4+0xbe>
 8000388:	f1c6 0c20 	rsb	ip, r6, #32
 800038c:	fa03 f406 	lsl.w	r4, r3, r6
 8000390:	fa22 f30c 	lsr.w	r3, r2, ip
 8000394:	431c      	orrs	r4, r3
 8000396:	fa20 f70c 	lsr.w	r7, r0, ip
 800039a:	fa01 f306 	lsl.w	r3, r1, r6
 800039e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003a2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003a6:	431f      	orrs	r7, r3
 80003a8:	0c3b      	lsrs	r3, r7, #16
 80003aa:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ae:	fa1f f884 	uxth.w	r8, r4
 80003b2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003b6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003ba:	fb09 fa08 	mul.w	sl, r9, r8
 80003be:	458a      	cmp	sl, r1
 80003c0:	fa02 f206 	lsl.w	r2, r2, r6
 80003c4:	fa00 f306 	lsl.w	r3, r0, r6
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x220>
 80003ca:	1861      	adds	r1, r4, r1
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d0:	d248      	bcs.n	8000464 <__udivmoddi4+0x2a8>
 80003d2:	458a      	cmp	sl, r1
 80003d4:	d946      	bls.n	8000464 <__udivmoddi4+0x2a8>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4421      	add	r1, r4
 80003dc:	eba1 010a 	sub.w	r1, r1, sl
 80003e0:	b2bf      	uxth	r7, r7
 80003e2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003ea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80003ee:	fb00 f808 	mul.w	r8, r0, r8
 80003f2:	45b8      	cmp	r8, r7
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x24a>
 80003f6:	19e7      	adds	r7, r4, r7
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d22e      	bcs.n	800045c <__udivmoddi4+0x2a0>
 80003fe:	45b8      	cmp	r8, r7
 8000400:	d92c      	bls.n	800045c <__udivmoddi4+0x2a0>
 8000402:	3802      	subs	r0, #2
 8000404:	4427      	add	r7, r4
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	eba7 0708 	sub.w	r7, r7, r8
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	454f      	cmp	r7, r9
 8000414:	46c6      	mov	lr, r8
 8000416:	4649      	mov	r1, r9
 8000418:	d31a      	bcc.n	8000450 <__udivmoddi4+0x294>
 800041a:	d017      	beq.n	800044c <__udivmoddi4+0x290>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x27a>
 800041e:	ebb3 020e 	subs.w	r2, r3, lr
 8000422:	eb67 0701 	sbc.w	r7, r7, r1
 8000426:	fa07 fc0c 	lsl.w	ip, r7, ip
 800042a:	40f2      	lsrs	r2, r6
 800042c:	ea4c 0202 	orr.w	r2, ip, r2
 8000430:	40f7      	lsrs	r7, r6
 8000432:	e9c5 2700 	strd	r2, r7, [r5]
 8000436:	2600      	movs	r6, #0
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	462e      	mov	r6, r5
 8000440:	4628      	mov	r0, r5
 8000442:	e70b      	b.n	800025c <__udivmoddi4+0xa0>
 8000444:	4606      	mov	r6, r0
 8000446:	e6e9      	b.n	800021c <__udivmoddi4+0x60>
 8000448:	4618      	mov	r0, r3
 800044a:	e6fd      	b.n	8000248 <__udivmoddi4+0x8c>
 800044c:	4543      	cmp	r3, r8
 800044e:	d2e5      	bcs.n	800041c <__udivmoddi4+0x260>
 8000450:	ebb8 0e02 	subs.w	lr, r8, r2
 8000454:	eb69 0104 	sbc.w	r1, r9, r4
 8000458:	3801      	subs	r0, #1
 800045a:	e7df      	b.n	800041c <__udivmoddi4+0x260>
 800045c:	4608      	mov	r0, r1
 800045e:	e7d2      	b.n	8000406 <__udivmoddi4+0x24a>
 8000460:	4660      	mov	r0, ip
 8000462:	e78d      	b.n	8000380 <__udivmoddi4+0x1c4>
 8000464:	4681      	mov	r9, r0
 8000466:	e7b9      	b.n	80003dc <__udivmoddi4+0x220>
 8000468:	4666      	mov	r6, ip
 800046a:	e775      	b.n	8000358 <__udivmoddi4+0x19c>
 800046c:	4630      	mov	r0, r6
 800046e:	e74a      	b.n	8000306 <__udivmoddi4+0x14a>
 8000470:	f1ac 0c02 	sub.w	ip, ip, #2
 8000474:	4439      	add	r1, r7
 8000476:	e713      	b.n	80002a0 <__udivmoddi4+0xe4>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	e724      	b.n	80002c8 <__udivmoddi4+0x10c>
 800047e:	bf00      	nop

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <TextLCD_Strobe>:
#include "lcd.h"
#include "string.h"
// D7 D6 D5 D4 BT E  RW RS

void TextLCD_Strobe(TextLCDType *lcd)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af02      	add	r7, sp, #8
 800048a:	6078      	str	r0, [r7, #4]
	// Set bit 2 which corresponds to E (strobe) and send data
	lcd->data |= 0x04;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	795b      	ldrb	r3, [r3, #5]
 8000490:	f043 0304 	orr.w	r3, r3, #4
 8000494:	b2da      	uxtb	r2, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	6818      	ldr	r0, [r3, #0]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	791b      	ldrb	r3, [r3, #4]
 80004a2:	b299      	uxth	r1, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	1d5a      	adds	r2, r3, #5
 80004a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ac:	9300      	str	r3, [sp, #0]
 80004ae:	2301      	movs	r3, #1
 80004b0:	f002 fd0c 	bl	8002ecc <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80004b4:	2001      	movs	r0, #1
 80004b6:	f000 ffc3 	bl	8001440 <HAL_Delay>
	// Clear bit 2 which corresponds to E (strobe) and send data
	lcd->data &= 0xFB;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	795b      	ldrb	r3, [r3, #5]
 80004be:	f023 0304 	bic.w	r3, r3, #4
 80004c2:	b2da      	uxtb	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	6818      	ldr	r0, [r3, #0]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	791b      	ldrb	r3, [r3, #4]
 80004d0:	b299      	uxth	r1, r3
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	1d5a      	adds	r2, r3, #5
 80004d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	2301      	movs	r3, #1
 80004de:	f002 fcf5 	bl	8002ecc <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80004e2:	2001      	movs	r0, #1
 80004e4:	f000 ffac 	bl	8001440 <HAL_Delay>
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <TextLCD_Cmd>:

void TextLCD_Cmd(TextLCDType *lcd, uint8_t cmd)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af02      	add	r7, sp, #8
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	460b      	mov	r3, r1
 80004fa:	70fb      	strb	r3, [r7, #3]
	// for command RS is set to 0
	lcd->data = (lcd->data & 0x0C) | (cmd & 0xF0);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	795b      	ldrb	r3, [r3, #5]
 8000500:	b25b      	sxtb	r3, r3
 8000502:	f003 030c 	and.w	r3, r3, #12
 8000506:	b25a      	sxtb	r2, r3
 8000508:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800050c:	f023 030f 	bic.w	r3, r3, #15
 8000510:	b25b      	sxtb	r3, r3
 8000512:	4313      	orrs	r3, r2
 8000514:	b25b      	sxtb	r3, r3
 8000516:	b2da      	uxtb	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6818      	ldr	r0, [r3, #0]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	791b      	ldrb	r3, [r3, #4]
 8000524:	b299      	uxth	r1, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	1d5a      	adds	r2, r3, #5
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2301      	movs	r3, #1
 8000532:	f002 fccb 	bl	8002ecc <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f7ff ffa4 	bl	8000484 <TextLCD_Strobe>
	lcd->data = (lcd->data & 0x0C) | (cmd << 4);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	b25b      	sxtb	r3, r3
 8000542:	f003 030c 	and.w	r3, r3, #12
 8000546:	b25a      	sxtb	r2, r3
 8000548:	78fb      	ldrb	r3, [r7, #3]
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	b25b      	sxtb	r3, r3
 800054e:	4313      	orrs	r3, r2
 8000550:	b25b      	sxtb	r3, r3
 8000552:	b2da      	uxtb	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6818      	ldr	r0, [r3, #0]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	791b      	ldrb	r3, [r3, #4]
 8000560:	b299      	uxth	r1, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	1d5a      	adds	r2, r3, #5
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	2301      	movs	r3, #1
 800056e:	f002 fcad 	bl	8002ecc <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f7ff ff86 	bl	8000484 <TextLCD_Strobe>
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <TextLCD_Data>:

void TextLCD_Data(TextLCDType *lcd, uint8_t data)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af02      	add	r7, sp, #8
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
	// for data RS is set to 1
	lcd->data = (lcd->data & 0x0D) | (data & 0xF0) | 0x01;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	795b      	ldrb	r3, [r3, #5]
 8000590:	b25b      	sxtb	r3, r3
 8000592:	f003 030d 	and.w	r3, r3, #13
 8000596:	b25a      	sxtb	r2, r3
 8000598:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800059c:	f023 030f 	bic.w	r3, r3, #15
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	4313      	orrs	r3, r2
 80005a4:	b25b      	sxtb	r3, r3
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6818      	ldr	r0, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	791b      	ldrb	r3, [r3, #4]
 80005ba:	b299      	uxth	r1, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	1d5a      	adds	r2, r3, #5
 80005c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2301      	movs	r3, #1
 80005c8:	f002 fc80 	bl	8002ecc <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff ff59 	bl	8000484 <TextLCD_Strobe>
	lcd->data = (lcd->data & 0x0D) | (data << 4) | 0x01;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	795b      	ldrb	r3, [r3, #5]
 80005d6:	b25b      	sxtb	r3, r3
 80005d8:	f003 030d 	and.w	r3, r3, #13
 80005dc:	b25a      	sxtb	r2, r3
 80005de:	78fb      	ldrb	r3, [r7, #3]
 80005e0:	011b      	lsls	r3, r3, #4
 80005e2:	b25b      	sxtb	r3, r3
 80005e4:	4313      	orrs	r3, r2
 80005e6:	b25b      	sxtb	r3, r3
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	b25b      	sxtb	r3, r3
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6818      	ldr	r0, [r3, #0]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	791b      	ldrb	r3, [r3, #4]
 80005fc:	b299      	uxth	r1, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	1d5a      	adds	r2, r3, #5
 8000602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2301      	movs	r3, #1
 800060a:	f002 fc5f 	bl	8002ecc <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f7ff ff38 	bl	8000484 <TextLCD_Strobe>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <TextLCD_Init>:

void TextLCD_Init(TextLCDType *lcd, I2C_HandleTypeDef *hi2c, uint8_t DevAddress)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	4613      	mov	r3, r2
 8000628:	71fb      	strb	r3, [r7, #7]
	lcd->hi2c = hi2c;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	601a      	str	r2, [r3, #0]
	lcd->DevAddress = DevAddress;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	79fa      	ldrb	r2, [r7, #7]
 8000634:	711a      	strb	r2, [r3, #4]
	lcd->data = 0x38;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	2238      	movs	r2, #56	; 0x38
 800063a:	715a      	strb	r2, [r3, #5]

	// Do init setting LCD controller into 4-bit mode
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	6818      	ldr	r0, [r3, #0]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	b299      	uxth	r1, r3
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	1d5a      	adds	r2, r3, #5
 800064a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2301      	movs	r3, #1
 8000652:	f002 fc3b 	bl	8002ecc <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000656:	68f8      	ldr	r0, [r7, #12]
 8000658:	f7ff ff14 	bl	8000484 <TextLCD_Strobe>
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	6818      	ldr	r0, [r3, #0]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	b299      	uxth	r1, r3
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	1d5a      	adds	r2, r3, #5
 800066a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2301      	movs	r3, #1
 8000672:	f002 fc2b 	bl	8002ecc <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000676:	68f8      	ldr	r0, [r7, #12]
 8000678:	f7ff ff04 	bl	8000484 <TextLCD_Strobe>
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	6818      	ldr	r0, [r3, #0]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	b299      	uxth	r1, r3
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	1d5a      	adds	r2, r3, #5
 800068a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2301      	movs	r3, #1
 8000692:	f002 fc1b 	bl	8002ecc <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f7ff fef4 	bl	8000484 <TextLCD_Strobe>
	lcd->data = 0x28;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2228      	movs	r2, #40	; 0x28
 80006a0:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	6818      	ldr	r0, [r3, #0]
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	791b      	ldrb	r3, [r3, #4]
 80006aa:	b299      	uxth	r1, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	1d5a      	adds	r2, r3, #5
 80006b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	f002 fc08 	bl	8002ecc <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 80006bc:	68f8      	ldr	r0, [r7, #12]
 80006be:	f7ff fee1 	bl	8000484 <TextLCD_Strobe>

	// Finished setting up 4-bit mode. Let's configure display

	TextLCD_Cmd(lcd, 0x28); //N=1 (2 line), F=0 (5x8)
 80006c2:	2128      	movs	r1, #40	; 0x28
 80006c4:	68f8      	ldr	r0, [r7, #12]
 80006c6:	f7ff ff13 	bl	80004f0 <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x08); //Display off, Cursor Off, Blink off
 80006ca:	2108      	movs	r1, #8
 80006cc:	68f8      	ldr	r0, [r7, #12]
 80006ce:	f7ff ff0f 	bl	80004f0 <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x01); //Clear
 80006d2:	2101      	movs	r1, #1
 80006d4:	68f8      	ldr	r0, [r7, #12]
 80006d6:	f7ff ff0b 	bl	80004f0 <TextLCD_Cmd>
	HAL_Delay(5);
 80006da:	2005      	movs	r0, #5
 80006dc:	f000 feb0 	bl	8001440 <HAL_Delay>
	TextLCD_Cmd(lcd, 0x06); //ID=1(increment), S=0 (no shift)
 80006e0:	2106      	movs	r1, #6
 80006e2:	68f8      	ldr	r0, [r7, #12]
 80006e4:	f7ff ff04 	bl	80004f0 <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x0C); //Display on, Cursor Off, Blink off
 80006e8:	210c      	movs	r1, #12
 80006ea:	68f8      	ldr	r0, [r7, #12]
 80006ec:	f7ff ff00 	bl	80004f0 <TextLCD_Cmd>
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <TextLCD_Home>:

void TextLCD_Home(TextLCDType *lcd)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
TextLCD_Cmd(lcd, 0x2);
 8000700:	2102      	movs	r1, #2
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff fef4 	bl	80004f0 <TextLCD_Cmd>
delay_us(1600);
 8000708:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800070c:	f000 f89c 	bl	8000848 <delay_us>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <TextLCD_Clear>:

void TextLCD_Clear(TextLCDType *lcd)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
TextLCD_Cmd(lcd, 0x1);
 8000720:	2101      	movs	r1, #1
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f7ff fee4 	bl	80004f0 <TextLCD_Cmd>
delay_us(1600);
 8000728:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800072c:	f000 f88c 	bl	8000848 <delay_us>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <TextLCD_Position>:

void TextLCD_Position(TextLCDType *lcd, int x, int y)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
	TextLCD_Home(lcd);
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f7ff ffd7 	bl	80006f8 <TextLCD_Home>
	int setPos=0x80;
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	617b      	str	r3, [r7, #20]
	setPos=(setPos+x)+(y*40);
 800074e:	697a      	ldr	r2, [r7, #20]
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	18d1      	adds	r1, r2, r3
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	4613      	mov	r3, r2
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	4413      	add	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	440b      	add	r3, r1
 8000760:	617b      	str	r3, [r7, #20]
	TextLCD_Cmd(lcd,setPos);
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	4619      	mov	r1, r3
 8000768:	68f8      	ldr	r0, [r7, #12]
 800076a:	f7ff fec1 	bl	80004f0 <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0xF);
 800076e:	210f      	movs	r1, #15
 8000770:	68f8      	ldr	r0, [r7, #12]
 8000772:	f7ff febd 	bl	80004f0 <TextLCD_Cmd>
	delay_us(50);
 8000776:	2032      	movs	r0, #50	; 0x32
 8000778:	f000 f866 	bl	8000848 <delay_us>
}
 800077c:	bf00      	nop
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <TextLCD_Putchar>:

void TextLCD_Putchar(TextLCDType *lcd, uint8_t data)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	70fb      	strb	r3, [r7, #3]
	TextLCD_Data(lcd, data);
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	4619      	mov	r1, r3
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff fef3 	bl	8000580 <TextLCD_Data>
	delay_us(50);
 800079a:	2032      	movs	r0, #50	; 0x32
 800079c:	f000 f854 	bl	8000848 <delay_us>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <TextLCD_Puts>:

void TextLCD_Puts(TextLCDType *lcd, char *string)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
	int string_length = strlen(string);
 80007b2:	6838      	ldr	r0, [r7, #0]
 80007b4:	f7ff fce2 	bl	800017c <strlen>
 80007b8:	4603      	mov	r3, r0
 80007ba:	60bb      	str	r3, [r7, #8]
	for(int i=0; i<string_length;i++){
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	e00a      	b.n	80007d8 <TextLCD_Puts+0x30>
		TextLCD_Putchar(lcd, string[i]);
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	4413      	add	r3, r2
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	4619      	mov	r1, r3
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ffd9 	bl	8000784 <TextLCD_Putchar>
	for(int i=0; i<string_length;i++){
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3301      	adds	r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	429a      	cmp	r2, r3
 80007de:	dbf0      	blt.n	80007c2 <TextLCD_Puts+0x1a>
	}
}
 80007e0:	bf00      	nop
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b083      	sub	sp, #12
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80007f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007fa:	f023 0218 	bic.w	r2, r3, #24
 80007fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4313      	orrs	r3, r2
 8000806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000816:	b480      	push	{r7}
 8000818:	b085      	sub	sp, #20
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800081e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000822:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000824:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4313      	orrs	r3, r2
 800082c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800082e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4013      	ands	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800083a:	68fb      	ldr	r3, [r7, #12]
}
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay_us(uint32_t us){
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <delay_us+0x2c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2200      	movs	r2, #0
 8000856:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 8000858:	bf00      	nop
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <delay_us+0x2c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	429a      	cmp	r2, r3
 8000864:	d8f9      	bhi.n	800085a <delay_us+0x12>
}
 8000866:	bf00      	nop
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	2000018c 	.word	0x2000018c

08000878 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1) {
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	if(__HAL_ADC_GET_FLAG(hadc1,ADC_FLAG_EOC)){
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	2b04      	cmp	r3, #4
 800088c:	d133      	bne.n	80008f6 <HAL_ADC_ConvCpltCallback+0x7e>
		adcValue[adcIndex] = HAL_ADC_GetValue(hadc1);
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <HAL_ADC_ConvCpltCallback+0x88>)
 8000890:	681c      	ldr	r4, [r3, #0]
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f001 f9a9 	bl	8001bea <HAL_ADC_GetValue>
 8000898:	4603      	mov	r3, r0
 800089a:	4a1a      	ldr	r2, [pc, #104]	; (8000904 <HAL_ADC_ConvCpltCallback+0x8c>)
 800089c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		adcIndex= ((adcIndex+1)%4);
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <HAL_ADC_ConvCpltCallback+0x88>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	425a      	negs	r2, r3
 80008a8:	f003 0303 	and.w	r3, r3, #3
 80008ac:	f002 0203 	and.w	r2, r2, #3
 80008b0:	bf58      	it	pl
 80008b2:	4253      	negpl	r3, r2
 80008b4:	4a12      	ldr	r2, [pc, #72]	; (8000900 <HAL_ADC_ConvCpltCallback+0x88>)
 80008b6:	6013      	str	r3, [r2, #0]

		if(adcIndex==0)
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <HAL_ADC_ConvCpltCallback+0x88>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d11a      	bne.n	80008f6 <HAL_ADC_ConvCpltCallback+0x7e>
		if( adcValue[0]<1500 || adcValue[0]>2500|| adcValue[1]<1500 || adcValue[1]>2500)
 80008c0:	4b10      	ldr	r3, [pc, #64]	; (8000904 <HAL_ADC_ConvCpltCallback+0x8c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f240 52db 	movw	r2, #1499	; 0x5db
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d911      	bls.n	80008f0 <HAL_ADC_ConvCpltCallback+0x78>
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <HAL_ADC_ConvCpltCallback+0x8c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d80b      	bhi.n	80008f0 <HAL_ADC_ConvCpltCallback+0x78>
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <HAL_ADC_ConvCpltCallback+0x8c>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f240 52db 	movw	r2, #1499	; 0x5db
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d905      	bls.n	80008f0 <HAL_ADC_ConvCpltCallback+0x78>
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <HAL_ADC_ConvCpltCallback+0x8c>)
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d902      	bls.n	80008f6 <HAL_ADC_ConvCpltCallback+0x7e>
				print=1;
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <HAL_ADC_ConvCpltCallback+0x90>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	601a      	str	r2, [r3, #0]
	}




}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd90      	pop	{r4, r7, pc}
 80008fe:	bf00      	nop
 8000900:	2000003c 	.word	0x2000003c
 8000904:	2000002c 	.word	0x2000002c
 8000908:	20000040 	.word	0x20000040

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000912:	f000 fd0f 	bl	8001334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000916:	f000 f895 	bl	8000a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091a:	f000 fad7 	bl	8000ecc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800091e:	f000 fa5f 	bl	8000de0 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000922:	f000 faab 	bl	8000e7c <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000926:	f000 f939 	bl	8000b9c <MX_ADC1_Init>
  MX_I2C1_Init();
 800092a:	f000 f9cb 	bl	8000cc4 <MX_I2C1_Init>
  MX_TIM2_Init();
 800092e:	f000 fa09 	bl	8000d44 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8000932:	4836      	ldr	r0, [pc, #216]	; (8000a0c <main+0x100>)
 8000934:	f004 fd2c 	bl	8005390 <HAL_TIM_Base_Start>
	HAL_ADC_Start_IT(&hadc1);
 8000938:	4835      	ldr	r0, [pc, #212]	; (8000a10 <main+0x104>)
 800093a:	f001 f8d9 	bl	8001af0 <HAL_ADC_Start_IT>

	TextLCD_Init(&lcd, &hi2c1, 0x4E);
 800093e:	224e      	movs	r2, #78	; 0x4e
 8000940:	4934      	ldr	r1, [pc, #208]	; (8000a14 <main+0x108>)
 8000942:	4835      	ldr	r0, [pc, #212]	; (8000a18 <main+0x10c>)
 8000944:	f7ff fe6a 	bl	800061c <TextLCD_Init>
	TextLCD_Clear(&lcd);
 8000948:	4833      	ldr	r0, [pc, #204]	; (8000a18 <main+0x10c>)
 800094a:	f7ff fee5 	bl	8000718 <TextLCD_Clear>
	TextLCD_Home(&lcd);
 800094e:	4832      	ldr	r0, [pc, #200]	; (8000a18 <main+0x10c>)
 8000950:	f7ff fed2 	bl	80006f8 <TextLCD_Home>
	while (1)
	{
		//		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
		//		delay_us(1000000);

		if(print==1){
 8000954:	4b31      	ldr	r3, [pc, #196]	; (8000a1c <main+0x110>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d152      	bne.n	8000a02 <main+0xf6>
			TextLCD_Clear(&lcd);
 800095c:	482e      	ldr	r0, [pc, #184]	; (8000a18 <main+0x10c>)
 800095e:	f7ff fedb 	bl	8000718 <TextLCD_Clear>
			if(adcValue[0]<1200)
 8000962:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <main+0x114>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800096a:	d204      	bcs.n	8000976 <main+0x6a>
				TextLCD_Puts(&lcd, "Left ");
 800096c:	492d      	ldr	r1, [pc, #180]	; (8000a24 <main+0x118>)
 800096e:	482a      	ldr	r0, [pc, #168]	; (8000a18 <main+0x10c>)
 8000970:	f7ff ff1a 	bl	80007a8 <TextLCD_Puts>
 8000974:	e008      	b.n	8000988 <main+0x7c>
			else if(adcValue[0]>2800)
 8000976:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <main+0x114>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 800097e:	d903      	bls.n	8000988 <main+0x7c>
				TextLCD_Puts(&lcd, "Right ");
 8000980:	4929      	ldr	r1, [pc, #164]	; (8000a28 <main+0x11c>)
 8000982:	4825      	ldr	r0, [pc, #148]	; (8000a18 <main+0x10c>)
 8000984:	f7ff ff10 	bl	80007a8 <TextLCD_Puts>
			if(adcValue[1]<1200)
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <main+0x114>)
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000990:	d204      	bcs.n	800099c <main+0x90>
				TextLCD_Puts(&lcd, "Up ");
 8000992:	4926      	ldr	r1, [pc, #152]	; (8000a2c <main+0x120>)
 8000994:	4820      	ldr	r0, [pc, #128]	; (8000a18 <main+0x10c>)
 8000996:	f7ff ff07 	bl	80007a8 <TextLCD_Puts>
 800099a:	e008      	b.n	80009ae <main+0xa2>
			else if(adcValue[1]>2800)
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <main+0x114>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80009a4:	d903      	bls.n	80009ae <main+0xa2>
				TextLCD_Puts(&lcd, "Down ");
 80009a6:	4922      	ldr	r1, [pc, #136]	; (8000a30 <main+0x124>)
 80009a8:	481b      	ldr	r0, [pc, #108]	; (8000a18 <main+0x10c>)
 80009aa:	f7ff fefd 	bl	80007a8 <TextLCD_Puts>

			TextLCD_Position(&lcd, 0, 1);
 80009ae:	2201      	movs	r2, #1
 80009b0:	2100      	movs	r1, #0
 80009b2:	4819      	ldr	r0, [pc, #100]	; (8000a18 <main+0x10c>)
 80009b4:	f7ff fec0 	bl	8000738 <TextLCD_Position>
			char temp[5];
			itoa(adcValue[2],temp,10);
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <main+0x114>)
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	4639      	mov	r1, r7
 80009be:	220a      	movs	r2, #10
 80009c0:	4618      	mov	r0, r3
 80009c2:	f005 fcaf 	bl	8006324 <itoa>
			TextLCD_Puts(&lcd, "Temp:");
 80009c6:	491b      	ldr	r1, [pc, #108]	; (8000a34 <main+0x128>)
 80009c8:	4813      	ldr	r0, [pc, #76]	; (8000a18 <main+0x10c>)
 80009ca:	f7ff feed 	bl	80007a8 <TextLCD_Puts>
			TextLCD_Puts(&lcd, temp);
 80009ce:	463b      	mov	r3, r7
 80009d0:	4619      	mov	r1, r3
 80009d2:	4811      	ldr	r0, [pc, #68]	; (8000a18 <main+0x10c>)
 80009d4:	f7ff fee8 	bl	80007a8 <TextLCD_Puts>
			TextLCD_Putchar(&lcd, ' ');
 80009d8:	2120      	movs	r1, #32
 80009da:	480f      	ldr	r0, [pc, #60]	; (8000a18 <main+0x10c>)
 80009dc:	f7ff fed2 	bl	8000784 <TextLCD_Putchar>
			if(adcValue[3]<450)
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <main+0x114>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80009e8:	d204      	bcs.n	80009f4 <main+0xe8>
				TextLCD_Puts(&lcd, "Dark");
 80009ea:	4913      	ldr	r1, [pc, #76]	; (8000a38 <main+0x12c>)
 80009ec:	480a      	ldr	r0, [pc, #40]	; (8000a18 <main+0x10c>)
 80009ee:	f7ff fedb 	bl	80007a8 <TextLCD_Puts>
 80009f2:	e003      	b.n	80009fc <main+0xf0>
			else
				TextLCD_Puts(&lcd, "Bright");
 80009f4:	4911      	ldr	r1, [pc, #68]	; (8000a3c <main+0x130>)
 80009f6:	4808      	ldr	r0, [pc, #32]	; (8000a18 <main+0x10c>)
 80009f8:	f7ff fed6 	bl	80007a8 <TextLCD_Puts>

			print=0;
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <main+0x110>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
		}
		delay_us(200000);
 8000a02:	480f      	ldr	r0, [pc, #60]	; (8000a40 <main+0x134>)
 8000a04:	f7ff ff20 	bl	8000848 <delay_us>
		if(print==1){
 8000a08:	e7a4      	b.n	8000954 <main+0x48>
 8000a0a:	bf00      	nop
 8000a0c:	2000018c 	.word	0x2000018c
 8000a10:	20000098 	.word	0x20000098
 8000a14:	2000004c 	.word	0x2000004c
 8000a18:	20000044 	.word	0x20000044
 8000a1c:	20000040 	.word	0x20000040
 8000a20:	2000002c 	.word	0x2000002c
 8000a24:	080063d4 	.word	0x080063d4
 8000a28:	080063dc 	.word	0x080063dc
 8000a2c:	080063e4 	.word	0x080063e4
 8000a30:	080063e8 	.word	0x080063e8
 8000a34:	080063f0 	.word	0x080063f0
 8000a38:	080063f8 	.word	0x080063f8
 8000a3c:	08006400 	.word	0x08006400
 8000a40:	00030d40 	.word	0x00030d40

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b0ae      	sub	sp, #184	; 0xb8
 8000a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a4e:	2248      	movs	r2, #72	; 0x48
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f005 fc68 	bl	8006328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
 8000a68:	615a      	str	r2, [r3, #20]
 8000a6a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2250      	movs	r2, #80	; 0x50
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f005 fc58 	bl	8006328 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a86:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	f023 0303 	bic.w	r3, r3, #3
 8000a92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a9c:	f002 fe24 	bl	80036e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f7ff fea2 	bl	80007ea <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa6:	4b3c      	ldr	r3, [pc, #240]	; (8000b98 <SystemClock_Config+0x154>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000aae:	4a3a      	ldr	r2, [pc, #232]	; (8000b98 <SystemClock_Config+0x154>)
 8000ab0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab4:	6013      	str	r3, [r2, #0]
 8000ab6:	4b38      	ldr	r3, [pc, #224]	; (8000b98 <SystemClock_Config+0x154>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000ac2:	2327      	movs	r3, #39	; 0x27
 8000ac4:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aca:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000acc:	2301      	movs	r3, #1
 8000ace:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000adc:	2340      	movs	r3, #64	; 0x40
 8000ade:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ae8:	2360      	movs	r3, #96	; 0x60
 8000aea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000af8:	4618      	mov	r0, r3
 8000afa:	f003 f989 	bl	8003e10 <HAL_RCC_OscConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b04:	f000 fa2a 	bl	8000f5c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000b08:	236f      	movs	r3, #111	; 0x6f
 8000b0a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b28:	2101      	movs	r1, #1
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 fcfc 	bl	8004528 <HAL_RCC_ClockConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000b36:	f000 fa11 	bl	8000f5c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 8000b3a:	f242 5305 	movw	r3, #9477	; 0x2505
 8000b3e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000b40:	2318      	movs	r3, #24
 8000b42:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000b44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b48:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b4e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000b50:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b54:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8000b56:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8000b5a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b60:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000b66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b70:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000b72:	2300      	movs	r3, #0
 8000b74:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f004 f923 	bl	8004dc8 <HAL_RCCEx_PeriphCLKConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000b88:	f000 f9e8 	bl	8000f5c <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b8c:	f004 fa92 	bl	80050b4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b90:	bf00      	nop
 8000b92:	37b8      	adds	r7, #184	; 0xb8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	58000400 	.word	0x58000400

08000b9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
 8000bb0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bb2:	4b3e      	ldr	r3, [pc, #248]	; (8000cac <MX_ADC1_Init+0x110>)
 8000bb4:	4a3e      	ldr	r2, [pc, #248]	; (8000cb0 <MX_ADC1_Init+0x114>)
 8000bb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bb8:	4b3c      	ldr	r3, [pc, #240]	; (8000cac <MX_ADC1_Init+0x110>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bbe:	4b3b      	ldr	r3, [pc, #236]	; (8000cac <MX_ADC1_Init+0x110>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bc4:	4b39      	ldr	r3, [pc, #228]	; (8000cac <MX_ADC1_Init+0x110>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bca:	4b38      	ldr	r3, [pc, #224]	; (8000cac <MX_ADC1_Init+0x110>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bd0:	4b36      	ldr	r3, [pc, #216]	; (8000cac <MX_ADC1_Init+0x110>)
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bd6:	4b35      	ldr	r3, [pc, #212]	; (8000cac <MX_ADC1_Init+0x110>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bdc:	4b33      	ldr	r3, [pc, #204]	; (8000cac <MX_ADC1_Init+0x110>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8000be2:	4b32      	ldr	r3, [pc, #200]	; (8000cac <MX_ADC1_Init+0x110>)
 8000be4:	2204      	movs	r2, #4
 8000be6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000be8:	4b30      	ldr	r3, [pc, #192]	; (8000cac <MX_ADC1_Init+0x110>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf0:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <MX_ADC1_Init+0x110>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <MX_ADC1_Init+0x110>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bfc:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <MX_ADC1_Init+0x110>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c04:	4b29      	ldr	r3, [pc, #164]	; (8000cac <MX_ADC1_Init+0x110>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c0a:	4b28      	ldr	r3, [pc, #160]	; (8000cac <MX_ADC1_Init+0x110>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c12:	4826      	ldr	r0, [pc, #152]	; (8000cac <MX_ADC1_Init+0x110>)
 8000c14:	f000 fe20 	bl	8001858 <HAL_ADC_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000c1e:	f000 f99d 	bl	8000f5c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c22:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <MX_ADC1_Init+0x118>)
 8000c24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c26:	2306      	movs	r3, #6
 8000c28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c2e:	237f      	movs	r3, #127	; 0x7f
 8000c30:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c32:	2304      	movs	r3, #4
 8000c34:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	481b      	ldr	r0, [pc, #108]	; (8000cac <MX_ADC1_Init+0x110>)
 8000c40:	f001 f9aa 	bl	8001f98 <HAL_ADC_ConfigChannel>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c4a:	f000 f987 	bl	8000f5c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MX_ADC1_Init+0x11c>)
 8000c50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c52:	230c      	movs	r3, #12
 8000c54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c56:	463b      	mov	r3, r7
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4814      	ldr	r0, [pc, #80]	; (8000cac <MX_ADC1_Init+0x110>)
 8000c5c:	f001 f99c 	bl	8001f98 <HAL_ADC_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000c66:	f000 f979 	bl	8000f5c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_ADC1_Init+0x120>)
 8000c6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c6e:	2312      	movs	r3, #18
 8000c70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c72:	463b      	mov	r3, r7
 8000c74:	4619      	mov	r1, r3
 8000c76:	480d      	ldr	r0, [pc, #52]	; (8000cac <MX_ADC1_Init+0x110>)
 8000c78:	f001 f98e 	bl	8001f98 <HAL_ADC_ConfigChannel>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000c82:	f000 f96b 	bl	8000f5c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_ADC1_Init+0x124>)
 8000c88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000c8a:	2318      	movs	r3, #24
 8000c8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4619      	mov	r1, r3
 8000c92:	4806      	ldr	r0, [pc, #24]	; (8000cac <MX_ADC1_Init+0x110>)
 8000c94:	f001 f980 	bl	8001f98 <HAL_ADC_ConfigChannel>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8000c9e:	f000 f95d 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000098 	.word	0x20000098
 8000cb0:	50040000 	.word	0x50040000
 8000cb4:	08600004 	.word	0x08600004
 8000cb8:	04300002 	.word	0x04300002
 8000cbc:	0c900008 	.word	0x0c900008
 8000cc0:	10c00010 	.word	0x10c00010

08000cc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cca:	4a1c      	ldr	r2, [pc, #112]	; (8000d3c <MX_I2C1_Init+0x78>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <MX_I2C1_Init+0x7c>)
 8000cd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cfe:	480e      	ldr	r0, [pc, #56]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000d00:	f002 f854 	bl	8002dac <HAL_I2C_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d0a:	f000 f927 	bl	8000f5c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4809      	ldr	r0, [pc, #36]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000d12:	f002 fb43 	bl	800339c <HAL_I2CEx_ConfigAnalogFilter>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d1c:	f000 f91e 	bl	8000f5c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d20:	2100      	movs	r1, #0
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000d24:	f002 fb85 	bl	8003432 <HAL_I2CEx_ConfigDigitalFilter>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d2e:	f000 f915 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	2000004c 	.word	0x2000004c
 8000d3c:	40005400 	.word	0x40005400
 8000d40:	00707cbb 	.word	0x00707cbb

08000d44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <MX_TIM2_Init+0x98>)
 8000d64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <MX_TIM2_Init+0x98>)
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_TIM2_Init+0x98>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_TIM2_Init+0x98>)
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <MX_TIM2_Init+0x98>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_TIM2_Init+0x98>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d8a:	4814      	ldr	r0, [pc, #80]	; (8000ddc <MX_TIM2_Init+0x98>)
 8000d8c:	f004 faa9 	bl	80052e2 <HAL_TIM_Base_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d96:	f000 f8e1 	bl	8000f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	4619      	mov	r1, r3
 8000da6:	480d      	ldr	r0, [pc, #52]	; (8000ddc <MX_TIM2_Init+0x98>)
 8000da8:	f004 fb38 	bl	800541c <HAL_TIM_ConfigClockSource>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000db2:	f000 f8d3 	bl	8000f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4806      	ldr	r0, [pc, #24]	; (8000ddc <MX_TIM2_Init+0x98>)
 8000dc4:	f004 fcf0 	bl	80057a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dce:	f000 f8c5 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	3720      	adds	r7, #32
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000018c 	.word	0x2000018c

08000de0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000de4:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000de6:	4a24      	ldr	r2, [pc, #144]	; (8000e78 <MX_USART1_UART_Init+0x98>)
 8000de8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dea:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000dec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000df2:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000df8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e00:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e06:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e08:	220c      	movs	r2, #12
 8000e0a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e2a:	4812      	ldr	r0, [pc, #72]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e2c:	f004 fd3c 	bl	80058a8 <HAL_UART_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000e36:	f000 f891 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e3e:	f005 f92f 	bl	80060a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000e48:	f000 f888 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4809      	ldr	r0, [pc, #36]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e50:	f005 f964 	bl	800611c <HAL_UARTEx_SetRxFifoThreshold>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000e5a:	f000 f87f 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e60:	f005 f8e5 	bl	800602e <HAL_UARTEx_DisableFifoMode>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000e6a:	f000 f877 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200000fc 	.word	0x200000fc
 8000e78:	40013800 	.word	0x40013800

08000e7c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <MX_USB_PCD_Init+0x48>)
 8000e82:	4a11      	ldr	r2, [pc, #68]	; (8000ec8 <MX_USB_PCD_Init+0x4c>)
 8000e84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_USB_PCD_Init+0x48>)
 8000e88:	2208      	movs	r2, #8
 8000e8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <MX_USB_PCD_Init+0x48>)
 8000e8e:	2202      	movs	r2, #2
 8000e90:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_USB_PCD_Init+0x48>)
 8000e94:	2202      	movs	r2, #2
 8000e96:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <MX_USB_PCD_Init+0x48>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_USB_PCD_Init+0x48>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <MX_USB_PCD_Init+0x48>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <MX_USB_PCD_Init+0x48>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MX_USB_PCD_Init+0x48>)
 8000eb2:	f002 fb0a 	bl	80034ca <HAL_PCD_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000ebc:	f000 f84e 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200001d8 	.word	0x200001d8
 8000ec8:	40006800 	.word	0x40006800

08000ecc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee0:	2004      	movs	r0, #4
 8000ee2:	f7ff fc98 	bl	8000816 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	f7ff fc95 	bl	8000816 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eec:	2001      	movs	r0, #1
 8000eee:	f7ff fc92 	bl	8000816 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef2:	2008      	movs	r0, #8
 8000ef4:	f7ff fc8f 	bl	8000816 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2123      	movs	r1, #35	; 0x23
 8000efc:	4814      	ldr	r0, [pc, #80]	; (8000f50 <MX_GPIO_Init+0x84>)
 8000efe:	f001 ff3d 	bl	8002d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f02:	2310      	movs	r3, #16
 8000f04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	4619      	mov	r1, r3
 8000f12:	4810      	ldr	r0, [pc, #64]	; (8000f54 <MX_GPIO_Init+0x88>)
 8000f14:	f001 fdc2 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000f18:	2323      	movs	r3, #35	; 0x23
 8000f1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4808      	ldr	r0, [pc, #32]	; (8000f50 <MX_GPIO_Init+0x84>)
 8000f2e:	f001 fdb5 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000f32:	2303      	movs	r3, #3
 8000f34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_GPIO_Init+0x8c>)
 8000f44:	f001 fdaa 	bl	8002a9c <HAL_GPIO_Init>

}
 8000f48:	bf00      	nop
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	48000400 	.word	0x48000400
 8000f54:	48000800 	.word	0x48000800
 8000f58:	48000c00 	.word	0x48000c00

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
}
 8000f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f64:	e7fe      	b.n	8000f64 <Error_Handler+0x8>

08000f66 <LL_AHB2_GRP1_EnableClock>:
{
 8000f66:	b480      	push	{r7}
 8000f68:	b085      	sub	sp, #20
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4013      	ands	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b085      	sub	sp, #20
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4013      	ands	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a10      	ldr	r2, [pc, #64]	; (800106c <HAL_ADC_MspInit+0x60>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d11a      	bne.n	8001064 <HAL_ADC_MspInit+0x58>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800102e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001032:	f7ff ff98 	bl	8000f66 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	2004      	movs	r0, #4
 8001038:	f7ff ff95 	bl	8000f66 <LL_AHB2_GRP1_EnableClock>
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = VRY_Pin|VRX_Pin|Light_Pin|Temp_Pin;
 800103c:	230f      	movs	r3, #15
 800103e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001040:	2303      	movs	r3, #3
 8001042:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	4619      	mov	r1, r3
 800104e:	4808      	ldr	r0, [pc, #32]	; (8001070 <HAL_ADC_MspInit+0x64>)
 8001050:	f001 fd24 	bl	8002a9c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	2012      	movs	r0, #18
 800105a:	f001 fcea 	bl	8002a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800105e:	2012      	movs	r0, #18
 8001060:	f001 fd01 	bl	8002a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001064:	bf00      	nop
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	50040000 	.word	0x50040000
 8001070:	48000800 	.word	0x48000800

08001074 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0f      	ldr	r2, [pc, #60]	; (80010d0 <HAL_I2C_MspInit+0x5c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d117      	bne.n	80010c6 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	2002      	movs	r0, #2
 8001098:	f7ff ff65 	bl	8000f66 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800109c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a2:	2312      	movs	r3, #18
 80010a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ae:	2304      	movs	r3, #4
 80010b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	4619      	mov	r1, r3
 80010b8:	4806      	ldr	r0, [pc, #24]	; (80010d4 <HAL_I2C_MspInit+0x60>)
 80010ba:	f001 fcef 	bl	8002a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010be:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80010c2:	f7ff ff69 	bl	8000f98 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010c6:	bf00      	nop
 80010c8:	3720      	adds	r7, #32
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40005400 	.word	0x40005400
 80010d4:	48000400 	.word	0x48000400

080010d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e8:	d102      	bne.n	80010f0 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ea:	2001      	movs	r0, #1
 80010ec:	f7ff ff54 	bl	8000f98 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <HAL_UART_MspInit+0x58>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d116      	bne.n	8001148 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800111a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800111e:	f7ff ff54 	bl	8000fca <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	2002      	movs	r0, #2
 8001124:	f7ff ff1f 	bl	8000f66 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001128:	23c0      	movs	r3, #192	; 0xc0
 800112a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001130:	2301      	movs	r3, #1
 8001132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001138:	2307      	movs	r3, #7
 800113a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	4619      	mov	r1, r3
 8001142:	4804      	ldr	r0, [pc, #16]	; (8001154 <HAL_UART_MspInit+0x5c>)
 8001144:	f001 fcaa 	bl	8002a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001148:	bf00      	nop
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40013800 	.word	0x40013800
 8001154:	48000400 	.word	0x48000400

08001158 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <HAL_PCD_MspInit+0x5c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d118      	bne.n	80011ac <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	2001      	movs	r0, #1
 800117c:	f7ff fef3 	bl	8000f66 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001180:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001184:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001192:	230a      	movs	r3, #10
 8001194:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	4619      	mov	r1, r3
 800119c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a0:	f001 fc7c 	bl	8002a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80011a4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80011a8:	f7ff fef6 	bl	8000f98 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80011ac:	bf00      	nop
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40006800 	.word	0x40006800

080011b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <NMI_Handler+0x4>

080011be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <HardFault_Handler+0x4>

080011c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <MemManage_Handler+0x4>

080011ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <BusFault_Handler+0x4>

080011d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <UsageFault_Handler+0x4>

080011d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001204:	f000 f8f0 	bl	80013e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <ADC1_IRQHandler+0x10>)
 8001212:	f000 fcf7 	bl	8001c04 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000098 	.word	0x20000098

08001220 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <SystemInit+0x98>)
 8001226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122a:	4a23      	ldr	r2, [pc, #140]	; (80012b8 <SystemInit+0x98>)
 800122c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001248:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800124c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800124e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <SystemInit+0x9c>)
 800125a:	4013      	ands	r3, r2
 800125c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800125e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001266:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800126a:	f023 0305 	bic.w	r3, r3, #5
 800126e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001276:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800127a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800127e:	f023 0301 	bic.w	r3, r3, #1
 8001282:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800128a:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <SystemInit+0xa0>)
 800128c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800128e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <SystemInit+0xa0>)
 8001294:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00
 80012bc:	faf6fefb 	.word	0xfaf6fefb
 80012c0:	22041000 	.word	0x22041000

080012c4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80012c4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c8:	3304      	adds	r3, #4

080012ca <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ca:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012cc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80012ce:	d3f9      	bcc.n	80012c4 <CopyDataInit>
  bx lr
 80012d0:	4770      	bx	lr

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80012d2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80012d4:	3004      	adds	r0, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80012d6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>
  bx lr
 80012da:	4770      	bx	lr

080012dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012dc:	480c      	ldr	r0, [pc, #48]	; (8001310 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80012de:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012e0:	f7ff ff9e 	bl	8001220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80012e4:	480b      	ldr	r0, [pc, #44]	; (8001314 <LoopForever+0x8>)
 80012e6:	490c      	ldr	r1, [pc, #48]	; (8001318 <LoopForever+0xc>)
 80012e8:	4a0c      	ldr	r2, [pc, #48]	; (800131c <LoopForever+0x10>)
 80012ea:	2300      	movs	r3, #0
 80012ec:	f7ff ffed 	bl	80012ca <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80012f0:	480b      	ldr	r0, [pc, #44]	; (8001320 <LoopForever+0x14>)
 80012f2:	490c      	ldr	r1, [pc, #48]	; (8001324 <LoopForever+0x18>)
 80012f4:	2300      	movs	r3, #0
 80012f6:	f7ff ffee 	bl	80012d6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80012fa:	480b      	ldr	r0, [pc, #44]	; (8001328 <LoopForever+0x1c>)
 80012fc:	490b      	ldr	r1, [pc, #44]	; (800132c <LoopForever+0x20>)
 80012fe:	2300      	movs	r3, #0
 8001300:	f7ff ffe9 	bl	80012d6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001304:	f004 ffd2 	bl	80062ac <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001308:	f7ff fb00 	bl	800090c <main>

0800130c <LoopForever>:

LoopForever:
  b LoopForever
 800130c:	e7fe      	b.n	800130c <LoopForever>
 800130e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001310:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001314:	20000004 	.word	0x20000004
 8001318:	20000010 	.word	0x20000010
 800131c:	08006534 	.word	0x08006534
  INIT_BSS _sbss, _ebss
 8001320:	20000010 	.word	0x20000010
 8001324:	200004d0 	.word	0x200004d0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001328:	20030000 	.word	0x20030000
 800132c:	20030000 	.word	0x20030000

08001330 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001330:	e7fe      	b.n	8001330 <AES1_IRQHandler>
	...

08001334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <HAL_Init+0x3c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <HAL_Init+0x3c>)
 8001344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001348:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134a:	2003      	movs	r0, #3
 800134c:	f001 fb66 	bl	8002a1c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001350:	2000      	movs	r0, #0
 8001352:	f000 f80f 	bl	8001374 <HAL_InitTick>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d002      	beq.n	8001362 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	71fb      	strb	r3, [r7, #7]
 8001360:	e001      	b.n	8001366 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001362:	f7ff fe4b 	bl	8000ffc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001366:	79fb      	ldrb	r3, [r7, #7]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	58004000 	.word	0x58004000

08001374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800137c:	2300      	movs	r3, #0
 800137e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <HAL_InitTick+0x6c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d024      	beq.n	80013d2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001388:	f003 fa7a 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 800138c:	4602      	mov	r2, r0
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_InitTick+0x6c>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	4619      	mov	r1, r3
 8001394:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001398:	fbb3 f3f1 	udiv	r3, r3, r1
 800139c:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 fb6e 	bl	8002a82 <HAL_SYSTICK_Config>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d10f      	bne.n	80013cc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b0f      	cmp	r3, #15
 80013b0:	d809      	bhi.n	80013c6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b2:	2200      	movs	r2, #0
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	f04f 30ff 	mov.w	r0, #4294967295
 80013ba:	f001 fb3a 	bl	8002a32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013be:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <HAL_InitTick+0x70>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	e007      	b.n	80013d6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	e004      	b.n	80013d6 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	e001      	b.n	80013d6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	2000000c 	.word	0x2000000c
 80013e4:	20000008 	.word	0x20000008

080013e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x20>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_IncTick+0x24>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_IncTick+0x24>)
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	2000000c 	.word	0x2000000c
 800140c:	200004cc 	.word	0x200004cc

08001410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <HAL_GetTick+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	200004cc 	.word	0x200004cc

08001428 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <HAL_GetTickPrio+0x14>)
 800142e:	681b      	ldr	r3, [r3, #0]
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000008 	.word	0x20000008

08001440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001448:	f7ff ffe2 	bl	8001410 <HAL_GetTick>
 800144c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001458:	d005      	beq.n	8001466 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_Delay+0x44>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001466:	bf00      	nop
 8001468:	f7ff ffd2 	bl	8001410 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	429a      	cmp	r2, r3
 8001476:	d8f7      	bhi.n	8001468 <HAL_Delay+0x28>
    {
    }
  }
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2000000c 	.word	0x2000000c

08001488 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	609a      	str	r2, [r3, #8]
#endif
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	609a      	str	r2, [r3, #8]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
 80014fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3360      	adds	r3, #96	; 0x60
 8001502:	461a      	mov	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <LL_ADC_SetOffset+0x44>)
 8001512:	4013      	ands	r3, r2
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	4313      	orrs	r3, r2
 8001520:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001528:	bf00      	nop
 800152a:	371c      	adds	r7, #28
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	03fff000 	.word	0x03fff000

08001538 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3360      	adds	r3, #96	; 0x60
 8001546:	461a      	mov	r2, r3
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001564:	b480      	push	{r7}
 8001566:	b087      	sub	sp, #28
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	3360      	adds	r3, #96	; 0x60
 8001574:	461a      	mov	r2, r3
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	431a      	orrs	r2, r3
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800158e:	bf00      	nop
 8001590:	371c      	adds	r7, #28
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015b2:	2300      	movs	r3, #0
#endif
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3330      	adds	r3, #48	; 0x30
 80015d0:	461a      	mov	r2, r3
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	4413      	add	r3, r2
 80015de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	f003 031f 	and.w	r3, r3, #31
 80015ea:	211f      	movs	r1, #31
 80015ec:	fa01 f303 	lsl.w	r3, r1, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	401a      	ands	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	0e9b      	lsrs	r3, r3, #26
 80015f8:	f003 011f 	and.w	r1, r3, #31
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	431a      	orrs	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 800160c:	bf00      	nop
 800160e:	371c      	adds	r7, #28
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f003 0303 	and.w	r3, r3, #3
#endif
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001640:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001648:	2301      	movs	r3, #1
 800164a:	e000      	b.n	800164e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800165a:	b480      	push	{r7}
 800165c:	b087      	sub	sp, #28
 800165e:	af00      	add	r7, sp, #0
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	3314      	adds	r3, #20
 800166a:	461a      	mov	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	0e5b      	lsrs	r3, r3, #25
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	4413      	add	r3, r2
 8001678:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	0d1b      	lsrs	r3, r3, #20
 8001682:	f003 031f 	and.w	r3, r3, #31
 8001686:	2107      	movs	r1, #7
 8001688:	fa01 f303 	lsl.w	r3, r1, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	401a      	ands	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	0d1b      	lsrs	r3, r3, #20
 8001694:	f003 031f 	and.w	r3, r3, #31
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	431a      	orrs	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 80016a4:	bf00      	nop
 80016a6:	371c      	adds	r7, #28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016c8:	43db      	mvns	r3, r3
 80016ca:	401a      	ands	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0318 	and.w	r3, r3, #24
 80016d2:	4908      	ldr	r1, [pc, #32]	; (80016f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016d4:	40d9      	lsrs	r1, r3
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	400b      	ands	r3, r1
 80016da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016de:	431a      	orrs	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	0007ffff 	.word	0x0007ffff

080016f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001708:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6093      	str	r3, [r2, #8]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800172c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001730:	d101      	bne.n	8001736 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001754:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001758:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001780:	d101      	bne.n	8001786 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017a8:	f043 0201 	orr.w	r2, r3, #1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <LL_ADC_IsEnabled+0x18>
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <LL_ADC_IsEnabled+0x1a>
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017f6:	f043 0204 	orr.w	r2, r3, #4
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	2b04      	cmp	r3, #4
 800181c:	d101      	bne.n	8001822 <LL_ADC_REG_IsConversionOngoing+0x18>
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b08      	cmp	r3, #8
 8001842:	d101      	bne.n	8001848 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001864:	2300      	movs	r3, #0
 8001866:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e12e      	b.n	8001ad4 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001880:	2b00      	cmp	r3, #0
 8001882:	d109      	bne.n	8001898 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff fbc1 	bl	800100c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff3d 	bl	800171c <LL_ADC_IsDeepPowerDownEnabled>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d004      	beq.n	80018b2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff23 	bl	80016f8 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff58 	bl	800176c <LL_ADC_IsInternalRegulatorEnabled>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d115      	bne.n	80018ee <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ff3c 	bl	8001744 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018cc:	4b83      	ldr	r3, [pc, #524]	; (8001adc <HAL_ADC_Init+0x284>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	099b      	lsrs	r3, r3, #6
 80018d2:	4a83      	ldr	r2, [pc, #524]	; (8001ae0 <HAL_ADC_Init+0x288>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	099b      	lsrs	r3, r3, #6
 80018da:	3301      	adds	r3, #1
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018e0:	e002      	b.n	80018e8 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f9      	bne.n	80018e2 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ff3a 	bl	800176c <LL_ADC_IsInternalRegulatorEnabled>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10d      	bne.n	800191a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001902:	f043 0210 	orr.w	r2, r3, #16
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	f043 0201 	orr.w	r2, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff73 	bl	800180a <LL_ADC_REG_IsConversionOngoing>
 8001924:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	2b00      	cmp	r3, #0
 8001930:	f040 80c7 	bne.w	8001ac2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 80c3 	bne.w	8001ac2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001940:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001944:	f043 0202 	orr.w	r2, r3, #2
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff33 	bl	80017bc <LL_ADC_IsEnabled>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10b      	bne.n	8001974 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800195c:	4861      	ldr	r0, [pc, #388]	; (8001ae4 <HAL_ADC_Init+0x28c>)
 800195e:	f7ff ff2d 	bl	80017bc <LL_ADC_IsEnabled>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d105      	bne.n	8001974 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	4619      	mov	r1, r3
 800196e:	485e      	ldr	r0, [pc, #376]	; (8001ae8 <HAL_ADC_Init+0x290>)
 8001970:	f7ff fd8a 	bl	8001488 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7e5b      	ldrb	r3, [r3, #25]
 8001978:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800197e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001984:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800198a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001992:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001994:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d106      	bne.n	80019b4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	3b01      	subs	r3, #1
 80019ac:	045b      	lsls	r3, r3, #17
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d009      	beq.n	80019d0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	4b45      	ldr	r3, [pc, #276]	; (8001aec <HAL_ADC_Init+0x294>)
 80019d8:	4013      	ands	r3, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	69b9      	ldr	r1, [r7, #24]
 80019e0:	430b      	orrs	r3, r1
 80019e2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff0e 	bl	800180a <LL_ADC_REG_IsConversionOngoing>
 80019ee:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff1b 	bl	8001830 <LL_ADC_INJ_IsConversionOngoing>
 80019fa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d13d      	bne.n	8001a7e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d13a      	bne.n	8001a7e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a0c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a14:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a24:	f023 0302 	bic.w	r3, r3, #2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	69b9      	ldr	r1, [r7, #24]
 8001a2e:	430b      	orrs	r3, r1
 8001a30:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d118      	bne.n	8001a6e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a46:	f023 0304 	bic.w	r3, r3, #4
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a52:	4311      	orrs	r1, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a58:	4311      	orrs	r1, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0201 	orr.w	r2, r2, #1
 8001a6a:	611a      	str	r2, [r3, #16]
 8001a6c:	e007      	b.n	8001a7e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0201 	bic.w	r2, r2, #1
 8001a7c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d10c      	bne.n	8001aa0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	f023 010f 	bic.w	r1, r3, #15
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	1e5a      	subs	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a9e:	e007      	b.n	8001ab0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 020f 	bic.w	r2, r2, #15
 8001aae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab4:	f023 0303 	bic.w	r3, r3, #3
 8001ab8:	f043 0201 	orr.w	r2, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	655a      	str	r2, [r3, #84]	; 0x54
 8001ac0:	e007      	b.n	8001ad2 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac6:	f043 0210 	orr.w	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ad2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3720      	adds	r7, #32
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000004 	.word	0x20000004
 8001ae0:	053e2d63 	.word	0x053e2d63
 8001ae4:	50040000 	.word	0x50040000
 8001ae8:	50040300 	.word	0x50040300
 8001aec:	fff0c007 	.word	0xfff0c007

08001af0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fe84 	bl	800180a <LL_ADC_REG_IsConversionOngoing>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d169      	bne.n	8001bdc <HAL_ADC_Start_IT+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_ADC_Start_IT+0x26>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e065      	b.n	8001be2 <HAL_ADC_Start_IT+0xf2>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 fe00 	bl	8002724 <ADC_Enable>
 8001b24:	4603      	mov	r3, r0
 8001b26:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d151      	bne.n	8001bd2 <HAL_ADC_Start_IT+0xe2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	655a      	str	r2, [r3, #84]	; 0x54
#if defined (ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d006      	beq.n	8001b5c <HAL_ADC_Start_IT+0x6c>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b52:	f023 0206 	bic.w	r2, r3, #6
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	659a      	str	r2, [r3, #88]	; 0x58
 8001b5a:	e002      	b.n	8001b62 <HAL_ADC_Start_IT+0x72>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	221c      	movs	r2, #28
 8001b68:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 021c 	bic.w	r2, r2, #28
 8001b80:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d108      	bne.n	8001b9c <HAL_ADC_Start_IT+0xac>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 0208 	orr.w	r2, r2, #8
 8001b98:	605a      	str	r2, [r3, #4]
          break;
 8001b9a:	e008      	b.n	8001bae <HAL_ADC_Start_IT+0xbe>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0204 	orr.w	r2, r2, #4
 8001baa:	605a      	str	r2, [r3, #4]
          break;
 8001bac:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d107      	bne.n	8001bc6 <HAL_ADC_Start_IT+0xd6>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0210 	orr.w	r2, r2, #16
 8001bc4:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fe09 	bl	80017e2 <LL_ADC_REG_StartConversion>
 8001bd0:	e006      	b.n	8001be0 <HAL_ADC_Start_IT+0xf0>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001bda:	e001      	b.n	8001be0 <HAL_ADC_Start_IT+0xf0>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d017      	beq.n	8001c5a <HAL_ADC_IRQHandler+0x56>
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d012      	beq.n	8001c5a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c38:	f003 0310 	and.w	r3, r3, #16
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d105      	bne.n	8001c4c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c44:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 fe0b 	bl	8002868 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2202      	movs	r2, #2
 8001c58:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d004      	beq.n	8001c6e <HAL_ADC_IRQHandler+0x6a>
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d109      	bne.n	8001c82 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d05d      	beq.n	8001d34 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d058      	beq.n	8001d34 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d105      	bne.n	8001c9a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c92:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fc7b 	bl	800159a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d03d      	beq.n	8001d26 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if defined (ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cb8:	d035      	beq.n	8001d26 <HAL_ADC_IRQHandler+0x122>
#endif
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d12e      	bne.n	8001d26 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fd9c 	bl	800180a <LL_ADC_REG_IsConversionOngoing>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11a      	bne.n	8001d0e <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 020c 	bic.w	r2, r2, #12
 8001ce6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d112      	bne.n	8001d26 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d04:	f043 0201 	orr.w	r2, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	655a      	str	r2, [r3, #84]	; 0x54
 8001d0c:	e00b      	b.n	8001d26 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d12:	f043 0210 	orr.w	r2, r3, #16
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	f043 0201 	orr.w	r2, r3, #1
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7fe fda6 	bl	8000878 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	220c      	movs	r2, #12
 8001d32:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	f003 0320 	and.w	r3, r3, #32
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d004      	beq.n	8001d48 <HAL_ADC_IRQHandler+0x144>
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f003 0320 	and.w	r3, r3, #32
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d109      	bne.n	8001d5c <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d074      	beq.n	8001e3c <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d06f      	beq.n	8001e3c <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d60:	f003 0310 	and.w	r3, r3, #16
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d105      	bne.n	8001d74 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fc5b 	bl	8001634 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001d7e:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fc08 	bl	800159a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d8a:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d049      	beq.n	8001e2e <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d007      	beq.n	8001db4 <HAL_ADC_IRQHandler+0x1b0>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d041      	beq.n	8001e2e <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d13c      	bne.n	8001e2e <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dbe:	2b40      	cmp	r3, #64	; 0x40
 8001dc0:	d135      	bne.n	8001e2e <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d12e      	bne.n	8001e2e <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fd2b 	bl	8001830 <LL_ADC_INJ_IsConversionOngoing>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d11a      	bne.n	8001e16 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dee:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d112      	bne.n	8001e2e <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0c:	f043 0201 	orr.w	r2, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	655a      	str	r2, [r3, #84]	; 0x54
 8001e14:	e00b      	b.n	8001e2e <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1a:	f043 0210 	orr.w	r2, r3, #16
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e26:	f043 0201 	orr.w	r2, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fcf2 	bl	8002818 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2260      	movs	r2, #96	; 0x60
 8001e3a:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d011      	beq.n	8001e6a <HAL_ADC_IRQHandler+0x266>
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00c      	beq.n	8001e6a <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f887 	bl	8001f70 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2280      	movs	r2, #128	; 0x80
 8001e68:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d012      	beq.n	8001e9a <HAL_ADC_IRQHandler+0x296>
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00d      	beq.n	8001e9a <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fcd8 	bl	8002840 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e98:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d012      	beq.n	8001eca <HAL_ADC_IRQHandler+0x2c6>
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00d      	beq.n	8001eca <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 fcca 	bl	8002854 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d02b      	beq.n	8001f2c <HAL_ADC_IRQHandler+0x328>
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d026      	beq.n	8001f2c <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d102      	bne.n	8001eec <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	e009      	b.n	8001f00 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fb91 	bl	8001618 <LL_ADC_REG_GetDMATransfer>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8001efc:	2301      	movs	r3, #1
 8001efe:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d10e      	bne.n	8001f24 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	f043 0202 	orr.w	r2, r3, #2
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f830 	bl	8001f84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2210      	movs	r2, #16
 8001f2a:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d018      	beq.n	8001f68 <HAL_ADC_IRQHandler+0x364>
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f44:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f50:	f043 0208 	orr.w	r2, r3, #8
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f60:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 fc62 	bl	800282c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8001f68:	bf00      	nop
 8001f6a:	3720      	adds	r7, #32
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b0b6      	sub	sp, #216	; 0xd8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x22>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e39f      	b.n	80026fa <HAL_ADC_ConfigChannel+0x762>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fc1f 	bl	800180a <LL_ADC_REG_IsConversionOngoing>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f040 8384 	bne.w	80026dc <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	6859      	ldr	r1, [r3, #4]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	f7ff faed 	bl	80015c0 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fc0d 	bl	800180a <LL_ADC_REG_IsConversionOngoing>
 8001ff0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fc19 	bl	8001830 <LL_ADC_INJ_IsConversionOngoing>
 8001ffe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002002:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002006:	2b00      	cmp	r3, #0
 8002008:	f040 81a6 	bne.w	8002358 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800200c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002010:	2b00      	cmp	r3, #0
 8002012:	f040 81a1 	bne.w	8002358 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	6819      	ldr	r1, [r3, #0]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	461a      	mov	r2, r3
 8002024:	f7ff fb19 	bl	800165a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	08db      	lsrs	r3, r3, #3
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	2b04      	cmp	r3, #4
 8002048:	d00a      	beq.n	8002060 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6919      	ldr	r1, [r3, #16]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800205a:	f7ff fa49 	bl	80014f0 <LL_ADC_SetOffset>
 800205e:	e17b      	b.n	8002358 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fa66 	bl	8001538 <LL_ADC_GetOffsetChannel>
 800206c:	4603      	mov	r3, r0
 800206e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10a      	bne.n	800208c <HAL_ADC_ConfigChannel+0xf4>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fa5b 	bl	8001538 <LL_ADC_GetOffsetChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	0e9b      	lsrs	r3, r3, #26
 8002086:	f003 021f 	and.w	r2, r3, #31
 800208a:	e01e      	b.n	80020ca <HAL_ADC_ConfigChannel+0x132>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fa50 	bl	8001538 <LL_ADC_GetOffsetChannel>
 8002098:	4603      	mov	r3, r0
 800209a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80020ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 80020ba:	2320      	movs	r3, #32
 80020bc:	e004      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 80020be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x14a>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	0e9b      	lsrs	r3, r3, #26
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	e018      	b.n	8002114 <HAL_ADC_ConfigChannel+0x17c>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020ee:	fa93 f3a3 	rbit	r3, r3
 80020f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80020f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80020fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002106:	2320      	movs	r3, #32
 8002108:	e004      	b.n	8002114 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800210a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	429a      	cmp	r2, r3
 8002116:	d106      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2200      	movs	r2, #0
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fa1f 	bl	8001564 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2101      	movs	r1, #1
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fa03 	bl	8001538 <LL_ADC_GetOffsetChannel>
 8002132:	4603      	mov	r3, r0
 8002134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10a      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x1ba>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2101      	movs	r1, #1
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff f9f8 	bl	8001538 <LL_ADC_GetOffsetChannel>
 8002148:	4603      	mov	r3, r0
 800214a:	0e9b      	lsrs	r3, r3, #26
 800214c:	f003 021f 	and.w	r2, r3, #31
 8002150:	e01e      	b.n	8002190 <HAL_ADC_ConfigChannel+0x1f8>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2101      	movs	r1, #1
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff f9ed 	bl	8001538 <LL_ADC_GetOffsetChannel>
 800215e:	4603      	mov	r3, r0
 8002160:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002170:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002174:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002178:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002180:	2320      	movs	r3, #32
 8002182:	e004      	b.n	800218e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002184:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x210>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0e9b      	lsrs	r3, r3, #26
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	e018      	b.n	80021da <HAL_ADC_ConfigChannel+0x242>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80021bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80021c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80021cc:	2320      	movs	r3, #32
 80021ce:	e004      	b.n	80021da <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80021d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021d4:	fab3 f383 	clz	r3, r3
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	429a      	cmp	r2, r3
 80021dc:	d106      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2200      	movs	r2, #0
 80021e4:	2101      	movs	r1, #1
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff f9bc 	bl	8001564 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2102      	movs	r1, #2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff f9a0 	bl	8001538 <LL_ADC_GetOffsetChannel>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10a      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x280>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2102      	movs	r1, #2
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff f995 	bl	8001538 <LL_ADC_GetOffsetChannel>
 800220e:	4603      	mov	r3, r0
 8002210:	0e9b      	lsrs	r3, r3, #26
 8002212:	f003 021f 	and.w	r2, r3, #31
 8002216:	e01e      	b.n	8002256 <HAL_ADC_ConfigChannel+0x2be>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2102      	movs	r1, #2
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff f98a 	bl	8001538 <LL_ADC_GetOffsetChannel>
 8002224:	4603      	mov	r3, r0
 8002226:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002236:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800223a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800223e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002246:	2320      	movs	r3, #32
 8002248:	e004      	b.n	8002254 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800224a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225e:	2b00      	cmp	r3, #0
 8002260:	d105      	bne.n	800226e <HAL_ADC_ConfigChannel+0x2d6>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	0e9b      	lsrs	r3, r3, #26
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	e016      	b.n	800229c <HAL_ADC_ConfigChannel+0x304>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002280:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002282:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002286:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800228e:	2320      	movs	r3, #32
 8002290:	e004      	b.n	800229c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002292:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	429a      	cmp	r2, r3
 800229e:	d106      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2200      	movs	r2, #0
 80022a6:	2102      	movs	r1, #2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff f95b 	bl	8001564 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2103      	movs	r1, #3
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff f93f 	bl	8001538 <LL_ADC_GetOffsetChannel>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10a      	bne.n	80022da <HAL_ADC_ConfigChannel+0x342>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2103      	movs	r1, #3
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff f934 	bl	8001538 <LL_ADC_GetOffsetChannel>
 80022d0:	4603      	mov	r3, r0
 80022d2:	0e9b      	lsrs	r3, r3, #26
 80022d4:	f003 021f 	and.w	r2, r3, #31
 80022d8:	e017      	b.n	800230a <HAL_ADC_ConfigChannel+0x372>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2103      	movs	r1, #3
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff f929 	bl	8001538 <LL_ADC_GetOffsetChannel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80022f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022f4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80022f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80022fc:	2320      	movs	r3, #32
 80022fe:	e003      	b.n	8002308 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002300:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002312:	2b00      	cmp	r3, #0
 8002314:	d105      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x38a>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	0e9b      	lsrs	r3, r3, #26
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	e011      	b.n	8002346 <HAL_ADC_ConfigChannel+0x3ae>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002332:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800233a:	2320      	movs	r3, #32
 800233c:	e003      	b.n	8002346 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800233e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002340:	fab3 f383 	clz	r3, r3
 8002344:	b2db      	uxtb	r3, r3
 8002346:	429a      	cmp	r2, r3
 8002348:	d106      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2200      	movs	r2, #0
 8002350:	2103      	movs	r1, #3
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff f906 	bl	8001564 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fa2d 	bl	80017bc <LL_ADC_IsEnabled>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	f040 81c2 	bne.w	80026ee <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	6819      	ldr	r1, [r3, #0]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	461a      	mov	r2, r3
 8002378:	f7ff f99a 	bl	80016b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4a8e      	ldr	r2, [pc, #568]	; (80025bc <HAL_ADC_ConfigChannel+0x624>)
 8002382:	4293      	cmp	r3, r2
 8002384:	f040 8130 	bne.w	80025e8 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10b      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x418>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	0e9b      	lsrs	r3, r3, #26
 800239e:	3301      	adds	r3, #1
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	2b09      	cmp	r3, #9
 80023a6:	bf94      	ite	ls
 80023a8:	2301      	movls	r3, #1
 80023aa:	2300      	movhi	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	e019      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x44c>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80023be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023c0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80023c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 80023c8:	2320      	movs	r3, #32
 80023ca:	e003      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80023cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023ce:	fab3 f383 	clz	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	3301      	adds	r3, #1
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	2b09      	cmp	r3, #9
 80023dc:	bf94      	ite	ls
 80023de:	2301      	movls	r3, #1
 80023e0:	2300      	movhi	r3, #0
 80023e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d079      	beq.n	80024dc <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d107      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x46c>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	0e9b      	lsrs	r3, r3, #26
 80023fa:	3301      	adds	r3, #1
 80023fc:	069b      	lsls	r3, r3, #26
 80023fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002402:	e015      	b.n	8002430 <HAL_ADC_ConfigChannel+0x498>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002414:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800241c:	2320      	movs	r3, #32
 800241e:	e003      	b.n	8002428 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	3301      	adds	r3, #1
 800242a:	069b      	lsls	r3, r3, #26
 800242c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002438:	2b00      	cmp	r3, #0
 800243a:	d109      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x4b8>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	0e9b      	lsrs	r3, r3, #26
 8002442:	3301      	adds	r3, #1
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	2101      	movs	r1, #1
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	e017      	b.n	8002480 <HAL_ADC_ConfigChannel+0x4e8>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800245e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002460:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002468:	2320      	movs	r3, #32
 800246a:	e003      	b.n	8002474 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 800246c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	3301      	adds	r3, #1
 8002476:	f003 031f 	and.w	r3, r3, #31
 800247a:	2101      	movs	r1, #1
 800247c:	fa01 f303 	lsl.w	r3, r1, r3
 8002480:	ea42 0103 	orr.w	r1, r2, r3
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10a      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x50e>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	0e9b      	lsrs	r3, r3, #26
 8002496:	3301      	adds	r3, #1
 8002498:	f003 021f 	and.w	r2, r3, #31
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	051b      	lsls	r3, r3, #20
 80024a4:	e018      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x540>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80024b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80024be:	2320      	movs	r3, #32
 80024c0:	e003      	b.n	80024ca <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80024c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c4:	fab3 f383 	clz	r3, r3
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	3301      	adds	r3, #1
 80024cc:	f003 021f 	and.w	r2, r3, #31
 80024d0:	4613      	mov	r3, r2
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4413      	add	r3, r2
 80024d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024d8:	430b      	orrs	r3, r1
 80024da:	e080      	b.n	80025de <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d107      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x560>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	0e9b      	lsrs	r3, r3, #26
 80024ee:	3301      	adds	r3, #1
 80024f0:	069b      	lsls	r3, r3, #26
 80024f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024f6:	e015      	b.n	8002524 <HAL_ADC_ConfigChannel+0x58c>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002500:	fa93 f3a3 	rbit	r3, r3
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002508:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002510:	2320      	movs	r3, #32
 8002512:	e003      	b.n	800251c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	3301      	adds	r3, #1
 800251e:	069b      	lsls	r3, r3, #26
 8002520:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252c:	2b00      	cmp	r3, #0
 800252e:	d109      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x5ac>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0e9b      	lsrs	r3, r3, #26
 8002536:	3301      	adds	r3, #1
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	2101      	movs	r1, #1
 800253e:	fa01 f303 	lsl.w	r3, r1, r3
 8002542:	e017      	b.n	8002574 <HAL_ADC_ConfigChannel+0x5dc>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	61fb      	str	r3, [r7, #28]
  return result;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 800255c:	2320      	movs	r3, #32
 800255e:	e003      	b.n	8002568 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	fab3 f383 	clz	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	3301      	adds	r3, #1
 800256a:	f003 031f 	and.w	r3, r3, #31
 800256e:	2101      	movs	r1, #1
 8002570:	fa01 f303 	lsl.w	r3, r1, r3
 8002574:	ea42 0103 	orr.w	r1, r2, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10d      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x608>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	0e9b      	lsrs	r3, r3, #26
 800258a:	3301      	adds	r3, #1
 800258c:	f003 021f 	and.w	r2, r3, #31
 8002590:	4613      	mov	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	3b1e      	subs	r3, #30
 8002598:	051b      	lsls	r3, r3, #20
 800259a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800259e:	e01d      	b.n	80025dc <HAL_ADC_ConfigChannel+0x644>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	613b      	str	r3, [r7, #16]
  return result;
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d103      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 80025b8:	2320      	movs	r3, #32
 80025ba:	e005      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x630>
 80025bc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	3301      	adds	r3, #1
 80025ca:	f003 021f 	and.w	r2, r3, #31
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	3b1e      	subs	r3, #30
 80025d6:	051b      	lsls	r3, r3, #20
 80025d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025dc:	430b      	orrs	r3, r1
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	6892      	ldr	r2, [r2, #8]
 80025e2:	4619      	mov	r1, r3
 80025e4:	f7ff f839 	bl	800165a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4b45      	ldr	r3, [pc, #276]	; (8002704 <HAL_ADC_ConfigChannel+0x76c>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d07c      	beq.n	80026ee <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025f4:	4844      	ldr	r0, [pc, #272]	; (8002708 <HAL_ADC_ConfigChannel+0x770>)
 80025f6:	f7fe ff6d 	bl	80014d4 <LL_ADC_GetCommonPathInternalCh>
 80025fa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025fe:	4843      	ldr	r0, [pc, #268]	; (800270c <HAL_ADC_ConfigChannel+0x774>)
 8002600:	f7ff f8dc 	bl	80017bc <LL_ADC_IsEnabled>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d15e      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a40      	ldr	r2, [pc, #256]	; (8002710 <HAL_ADC_ConfigChannel+0x778>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d127      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x6cc>
 8002614:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d121      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a39      	ldr	r2, [pc, #228]	; (800270c <HAL_ADC_ConfigChannel+0x774>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d161      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800262a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800262e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002632:	4619      	mov	r1, r3
 8002634:	4834      	ldr	r0, [pc, #208]	; (8002708 <HAL_ADC_ConfigChannel+0x770>)
 8002636:	f7fe ff3a 	bl	80014ae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800263a:	4b36      	ldr	r3, [pc, #216]	; (8002714 <HAL_ADC_ConfigChannel+0x77c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	099b      	lsrs	r3, r3, #6
 8002640:	4a35      	ldr	r2, [pc, #212]	; (8002718 <HAL_ADC_ConfigChannel+0x780>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	099b      	lsrs	r3, r3, #6
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	4613      	mov	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002654:	e002      	b.n	800265c <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3b01      	subs	r3, #1
 800265a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f9      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002662:	e044      	b.n	80026ee <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a2c      	ldr	r2, [pc, #176]	; (800271c <HAL_ADC_ConfigChannel+0x784>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d113      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x6fe>
 800266e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10d      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a23      	ldr	r2, [pc, #140]	; (800270c <HAL_ADC_ConfigChannel+0x774>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d134      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002684:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002688:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800268c:	4619      	mov	r1, r3
 800268e:	481e      	ldr	r0, [pc, #120]	; (8002708 <HAL_ADC_ConfigChannel+0x770>)
 8002690:	f7fe ff0d 	bl	80014ae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002694:	e02b      	b.n	80026ee <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a21      	ldr	r2, [pc, #132]	; (8002720 <HAL_ADC_ConfigChannel+0x788>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d126      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x756>
 80026a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d120      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a16      	ldr	r2, [pc, #88]	; (800270c <HAL_ADC_ConfigChannel+0x774>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d11b      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80026b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026be:	4619      	mov	r1, r3
 80026c0:	4811      	ldr	r0, [pc, #68]	; (8002708 <HAL_ADC_ConfigChannel+0x770>)
 80026c2:	f7fe fef4 	bl	80014ae <LL_ADC_SetCommonPathInternalCh>
 80026c6:	e012      	b.n	80026ee <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026cc:	f043 0220 	orr.w	r2, r3, #32
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80026da:	e008      	b.n	80026ee <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e0:	f043 0220 	orr.w	r2, r3, #32
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80026f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	37d8      	adds	r7, #216	; 0xd8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	80080000 	.word	0x80080000
 8002708:	50040300 	.word	0x50040300
 800270c:	50040000 	.word	0x50040000
 8002710:	c7520000 	.word	0xc7520000
 8002714:	20000004 	.word	0x20000004
 8002718:	053e2d63 	.word	0x053e2d63
 800271c:	cb840000 	.word	0xcb840000
 8002720:	80000001 	.word	0x80000001

08002724 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800272c:	2300      	movs	r3, #0
 800272e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff f841 	bl	80017bc <LL_ADC_IsEnabled>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d15e      	bne.n	80027fe <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	4b30      	ldr	r3, [pc, #192]	; (8002808 <ADC_Enable+0xe4>)
 8002748:	4013      	ands	r3, r2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00d      	beq.n	800276a <ADC_Enable+0x46>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002752:	f043 0210 	orr.w	r2, r3, #16
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	f043 0201 	orr.w	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e04a      	b.n	8002800 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff f810 	bl	8001794 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002774:	4825      	ldr	r0, [pc, #148]	; (800280c <ADC_Enable+0xe8>)
 8002776:	f7fe fead 	bl	80014d4 <LL_ADC_GetCommonPathInternalCh>
 800277a:	4603      	mov	r3, r0
 800277c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00f      	beq.n	80027a4 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002784:	4b22      	ldr	r3, [pc, #136]	; (8002810 <ADC_Enable+0xec>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	099b      	lsrs	r3, r3, #6
 800278a:	4a22      	ldr	r2, [pc, #136]	; (8002814 <ADC_Enable+0xf0>)
 800278c:	fba2 2303 	umull	r2, r3, r2, r3
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	3301      	adds	r3, #1
 8002794:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002796:	e002      	b.n	800279e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	3b01      	subs	r3, #1
 800279c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f9      	bne.n	8002798 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80027a4:	f7fe fe34 	bl	8001410 <HAL_GetTick>
 80027a8:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027aa:	e021      	b.n	80027f0 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff f803 	bl	80017bc <LL_ADC_IsEnabled>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d104      	bne.n	80027c6 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe ffe7 	bl	8001794 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027c6:	f7fe fe23 	bl	8001410 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d90d      	bls.n	80027f0 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d8:	f043 0210 	orr.w	r2, r3, #16
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	f043 0201 	orr.w	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e007      	b.n	8002800 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d1d6      	bne.n	80027ac <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	8000003f 	.word	0x8000003f
 800280c:	50040300 	.word	0x50040300
 8002810:	20000004 	.word	0x20000004
 8002814:	053e2d63 	.word	0x053e2d63

08002818 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <__NVIC_SetPriorityGrouping+0x44>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002898:	4013      	ands	r3, r2
 800289a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ae:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <__NVIC_SetPriorityGrouping+0x44>)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	60d3      	str	r3, [r2, #12]
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c8:	4b04      	ldr	r3, [pc, #16]	; (80028dc <__NVIC_GetPriorityGrouping+0x18>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	0a1b      	lsrs	r3, r3, #8
 80028ce:	f003 0307 	and.w	r3, r3, #7
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	db0b      	blt.n	800290a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	f003 021f 	and.w	r2, r3, #31
 80028f8:	4907      	ldr	r1, [pc, #28]	; (8002918 <__NVIC_EnableIRQ+0x38>)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	2001      	movs	r0, #1
 8002902:	fa00 f202 	lsl.w	r2, r0, r2
 8002906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e000e100 	.word	0xe000e100

0800291c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	6039      	str	r1, [r7, #0]
 8002926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292c:	2b00      	cmp	r3, #0
 800292e:	db0a      	blt.n	8002946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	b2da      	uxtb	r2, r3
 8002934:	490c      	ldr	r1, [pc, #48]	; (8002968 <__NVIC_SetPriority+0x4c>)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	0112      	lsls	r2, r2, #4
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	440b      	add	r3, r1
 8002940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002944:	e00a      	b.n	800295c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	b2da      	uxtb	r2, r3
 800294a:	4908      	ldr	r1, [pc, #32]	; (800296c <__NVIC_SetPriority+0x50>)
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	3b04      	subs	r3, #4
 8002954:	0112      	lsls	r2, r2, #4
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	440b      	add	r3, r1
 800295a:	761a      	strb	r2, [r3, #24]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	e000e100 	.word	0xe000e100
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	; 0x24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f1c3 0307 	rsb	r3, r3, #7
 800298a:	2b04      	cmp	r3, #4
 800298c:	bf28      	it	cs
 800298e:	2304      	movcs	r3, #4
 8002990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3304      	adds	r3, #4
 8002996:	2b06      	cmp	r3, #6
 8002998:	d902      	bls.n	80029a0 <NVIC_EncodePriority+0x30>
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3b03      	subs	r3, #3
 800299e:	e000      	b.n	80029a2 <NVIC_EncodePriority+0x32>
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a4:	f04f 32ff 	mov.w	r2, #4294967295
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43da      	mvns	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	401a      	ands	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b8:	f04f 31ff 	mov.w	r1, #4294967295
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	fa01 f303 	lsl.w	r3, r1, r3
 80029c2:	43d9      	mvns	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c8:	4313      	orrs	r3, r2
         );
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3724      	adds	r7, #36	; 0x24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e8:	d301      	bcc.n	80029ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ea:	2301      	movs	r3, #1
 80029ec:	e00f      	b.n	8002a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ee:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <SysTick_Config+0x40>)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029f6:	210f      	movs	r1, #15
 80029f8:	f04f 30ff 	mov.w	r0, #4294967295
 80029fc:	f7ff ff8e 	bl	800291c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <SysTick_Config+0x40>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a06:	4b04      	ldr	r3, [pc, #16]	; (8002a18 <SysTick_Config+0x40>)
 8002a08:	2207      	movs	r2, #7
 8002a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	e000e010 	.word	0xe000e010

08002a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff ff29 	bl	800287c <__NVIC_SetPriorityGrouping>
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b086      	sub	sp, #24
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	4603      	mov	r3, r0
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a40:	f7ff ff40 	bl	80028c4 <__NVIC_GetPriorityGrouping>
 8002a44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	6978      	ldr	r0, [r7, #20]
 8002a4c:	f7ff ff90 	bl	8002970 <NVIC_EncodePriority>
 8002a50:	4602      	mov	r2, r0
 8002a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff5f 	bl	800291c <__NVIC_SetPriority>
}
 8002a5e:	bf00      	nop
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff ff33 	bl	80028e0 <__NVIC_EnableIRQ>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ffa4 	bl	80029d8 <SysTick_Config>
 8002a90:	4603      	mov	r3, r0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aaa:	e14c      	b.n	8002d46 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab8:	4013      	ands	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 813e 	beq.w	8002d40 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d00b      	beq.n	8002ae4 <HAL_GPIO_Init+0x48>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d007      	beq.n	8002ae4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ad8:	2b11      	cmp	r3, #17
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b12      	cmp	r3, #18
 8002ae2:	d130      	bne.n	8002b46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	2203      	movs	r2, #3
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4013      	ands	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	091b      	lsrs	r3, r3, #4
 8002b30:	f003 0201 	and.w	r2, r3, #1
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	2203      	movs	r2, #3
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_Init+0xea>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b12      	cmp	r3, #18
 8002b84:	d123      	bne.n	8002bce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	08da      	lsrs	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3208      	adds	r2, #8
 8002b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	08da      	lsrs	r2, r3, #3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3208      	adds	r2, #8
 8002bc8:	6939      	ldr	r1, [r7, #16]
 8002bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	2203      	movs	r2, #3
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4013      	ands	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0203 	and.w	r2, r3, #3
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8098 	beq.w	8002d40 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002c10:	4a54      	ldr	r2, [pc, #336]	; (8002d64 <HAL_GPIO_Init+0x2c8>)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	089b      	lsrs	r3, r3, #2
 8002c16:	3302      	adds	r3, #2
 8002c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	220f      	movs	r2, #15
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c3a:	d019      	beq.n	8002c70 <HAL_GPIO_Init+0x1d4>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a4a      	ldr	r2, [pc, #296]	; (8002d68 <HAL_GPIO_Init+0x2cc>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d013      	beq.n	8002c6c <HAL_GPIO_Init+0x1d0>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a49      	ldr	r2, [pc, #292]	; (8002d6c <HAL_GPIO_Init+0x2d0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d00d      	beq.n	8002c68 <HAL_GPIO_Init+0x1cc>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a48      	ldr	r2, [pc, #288]	; (8002d70 <HAL_GPIO_Init+0x2d4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d007      	beq.n	8002c64 <HAL_GPIO_Init+0x1c8>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a47      	ldr	r2, [pc, #284]	; (8002d74 <HAL_GPIO_Init+0x2d8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d101      	bne.n	8002c60 <HAL_GPIO_Init+0x1c4>
 8002c5c:	2304      	movs	r3, #4
 8002c5e:	e008      	b.n	8002c72 <HAL_GPIO_Init+0x1d6>
 8002c60:	2307      	movs	r3, #7
 8002c62:	e006      	b.n	8002c72 <HAL_GPIO_Init+0x1d6>
 8002c64:	2303      	movs	r3, #3
 8002c66:	e004      	b.n	8002c72 <HAL_GPIO_Init+0x1d6>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e002      	b.n	8002c72 <HAL_GPIO_Init+0x1d6>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <HAL_GPIO_Init+0x1d6>
 8002c70:	2300      	movs	r3, #0
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	f002 0203 	and.w	r2, r2, #3
 8002c78:	0092      	lsls	r2, r2, #2
 8002c7a:	4093      	lsls	r3, r2
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c82:	4938      	ldr	r1, [pc, #224]	; (8002d64 <HAL_GPIO_Init+0x2c8>)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	089b      	lsrs	r3, r3, #2
 8002c88:	3302      	adds	r3, #2
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c90:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <HAL_GPIO_Init+0x2dc>)
 8002c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cb6:	4a30      	ldr	r2, [pc, #192]	; (8002d78 <HAL_GPIO_Init+0x2dc>)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002cbe:	4b2e      	ldr	r3, [pc, #184]	; (8002d78 <HAL_GPIO_Init+0x2dc>)
 8002cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ce4:	4a24      	ldr	r2, [pc, #144]	; (8002d78 <HAL_GPIO_Init+0x2dc>)
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cec:	4b22      	ldr	r3, [pc, #136]	; (8002d78 <HAL_GPIO_Init+0x2dc>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d10:	4a19      	ldr	r2, [pc, #100]	; (8002d78 <HAL_GPIO_Init+0x2dc>)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d16:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <HAL_GPIO_Init+0x2dc>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4013      	ands	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d3a:	4a0f      	ldr	r2, [pc, #60]	; (8002d78 <HAL_GPIO_Init+0x2dc>)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	3301      	adds	r3, #1
 8002d44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f47f aeab 	bne.w	8002aac <HAL_GPIO_Init+0x10>
  }
}
 8002d56:	bf00      	nop
 8002d58:	bf00      	nop
 8002d5a:	371c      	adds	r7, #28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	40010000 	.word	0x40010000
 8002d68:	48000400 	.word	0x48000400
 8002d6c:	48000800 	.word	0x48000800
 8002d70:	48000c00 	.word	0x48000c00
 8002d74:	48001000 	.word	0x48001000
 8002d78:	58000800 	.word	0x58000800

08002d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d8c:	787b      	ldrb	r3, [r7, #1]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d92:	887a      	ldrh	r2, [r7, #2]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d98:	e002      	b.n	8002da0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d9a:	887a      	ldrh	r2, [r7, #2]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e081      	b.n	8002ec2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7fe f94e 	bl	8001074 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2224      	movs	r2, #36	; 0x24
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dfc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d107      	bne.n	8002e26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	e006      	b.n	8002e34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d104      	bne.n	8002e46 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	ea42 0103 	orr.w	r1, r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	021a      	lsls	r2, r3, #8
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69d9      	ldr	r1, [r3, #28]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1a      	ldr	r2, [r3, #32]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	460b      	mov	r3, r1
 8002eda:	817b      	strh	r3, [r7, #10]
 8002edc:	4613      	mov	r3, r2
 8002ede:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	f040 80da 	bne.w	80030a2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_I2C_Master_Transmit+0x30>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e0d3      	b.n	80030a4 <HAL_I2C_Master_Transmit+0x1d8>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f04:	f7fe fa84 	bl	8001410 <HAL_GetTick>
 8002f08:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	2319      	movs	r3, #25
 8002f10:	2201      	movs	r2, #1
 8002f12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f8f0 	bl	80030fc <I2C_WaitOnFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e0be      	b.n	80030a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2221      	movs	r2, #33	; 0x21
 8002f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2210      	movs	r2, #16
 8002f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	893a      	ldrh	r2, [r7, #8]
 8002f46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	2bff      	cmp	r3, #255	; 0xff
 8002f56:	d90e      	bls.n	8002f76 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	22ff      	movs	r2, #255	; 0xff
 8002f5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	8979      	ldrh	r1, [r7, #10]
 8002f66:	4b51      	ldr	r3, [pc, #324]	; (80030ac <HAL_I2C_Master_Transmit+0x1e0>)
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f9e6 	bl	8003340 <I2C_TransferConfig>
 8002f74:	e06c      	b.n	8003050 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	8979      	ldrh	r1, [r7, #10]
 8002f88:	4b48      	ldr	r3, [pc, #288]	; (80030ac <HAL_I2C_Master_Transmit+0x1e0>)
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f9d5 	bl	8003340 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002f96:	e05b      	b.n	8003050 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	6a39      	ldr	r1, [r7, #32]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f8ed 	bl	800317c <I2C_WaitOnTXISFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e07b      	b.n	80030a4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d034      	beq.n	8003050 <HAL_I2C_Master_Transmit+0x184>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d130      	bne.n	8003050 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2180      	movs	r1, #128	; 0x80
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 f87f 	bl	80030fc <I2C_WaitOnFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e04d      	b.n	80030a4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	2bff      	cmp	r3, #255	; 0xff
 8003010:	d90e      	bls.n	8003030 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	22ff      	movs	r2, #255	; 0xff
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301c:	b2da      	uxtb	r2, r3
 800301e:	8979      	ldrh	r1, [r7, #10]
 8003020:	2300      	movs	r3, #0
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f989 	bl	8003340 <I2C_TransferConfig>
 800302e:	e00f      	b.n	8003050 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303e:	b2da      	uxtb	r2, r3
 8003040:	8979      	ldrh	r1, [r7, #10]
 8003042:	2300      	movs	r3, #0
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 f978 	bl	8003340 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d19e      	bne.n	8002f98 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	6a39      	ldr	r1, [r7, #32]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f8cc 	bl	80031fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e01a      	b.n	80030a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2220      	movs	r2, #32
 8003074:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6859      	ldr	r1, [r3, #4]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_I2C_Master_Transmit+0x1e4>)
 8003082:	400b      	ands	r3, r1
 8003084:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	e000      	b.n	80030a4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
  }
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	80002000 	.word	0x80002000
 80030b0:	fe00e800 	.word	0xfe00e800

080030b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d103      	bne.n	80030d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2200      	movs	r2, #0
 80030d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d007      	beq.n	80030f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	619a      	str	r2, [r3, #24]
  }
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	4613      	mov	r3, r2
 800310a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800310c:	e022      	b.n	8003154 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d01e      	beq.n	8003154 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003116:	f7fe f97b 	bl	8001410 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d302      	bcc.n	800312c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d113      	bne.n	8003154 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003130:	f043 0220 	orr.w	r2, r3, #32
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e00f      	b.n	8003174 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	4013      	ands	r3, r2
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	429a      	cmp	r2, r3
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	461a      	mov	r2, r3
 800316c:	79fb      	ldrb	r3, [r7, #7]
 800316e:	429a      	cmp	r2, r3
 8003170:	d0cd      	beq.n	800310e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003188:	e02c      	b.n	80031e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68b9      	ldr	r1, [r7, #8]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f870 	bl	8003274 <I2C_IsAcknowledgeFailed>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e02a      	b.n	80031f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a4:	d01e      	beq.n	80031e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a6:	f7fe f933 	bl	8001410 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d302      	bcc.n	80031bc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d113      	bne.n	80031e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	f043 0220 	orr.w	r2, r3, #32
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e007      	b.n	80031f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d1cb      	bne.n	800318a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003208:	e028      	b.n	800325c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 f830 	bl	8003274 <I2C_IsAcknowledgeFailed>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e026      	b.n	800326c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321e:	f7fe f8f7 	bl	8001410 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	429a      	cmp	r2, r3
 800322c:	d302      	bcc.n	8003234 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d113      	bne.n	800325c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003238:	f043 0220 	orr.w	r2, r3, #32
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e007      	b.n	800326c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	f003 0320 	and.w	r3, r3, #32
 8003266:	2b20      	cmp	r3, #32
 8003268:	d1cf      	bne.n	800320a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b10      	cmp	r3, #16
 800328c:	d151      	bne.n	8003332 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800328e:	e022      	b.n	80032d6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003296:	d01e      	beq.n	80032d6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003298:	f7fe f8ba 	bl	8001410 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d302      	bcc.n	80032ae <I2C_IsAcknowledgeFailed+0x3a>
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d113      	bne.n	80032d6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	f043 0220 	orr.w	r2, r3, #32
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e02e      	b.n	8003334 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d1d5      	bne.n	8003290 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2210      	movs	r2, #16
 80032ea:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2220      	movs	r2, #32
 80032f2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f7ff fedd 	bl	80030b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6859      	ldr	r1, [r3, #4]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b0d      	ldr	r3, [pc, #52]	; (800333c <I2C_IsAcknowledgeFailed+0xc8>)
 8003306:	400b      	ands	r3, r1
 8003308:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	f043 0204 	orr.w	r2, r3, #4
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	fe00e800 	.word	0xfe00e800

08003340 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	607b      	str	r3, [r7, #4]
 800334a:	460b      	mov	r3, r1
 800334c:	817b      	strh	r3, [r7, #10]
 800334e:	4613      	mov	r3, r2
 8003350:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	0d5b      	lsrs	r3, r3, #21
 800335c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003360:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <I2C_TransferConfig+0x58>)
 8003362:	430b      	orrs	r3, r1
 8003364:	43db      	mvns	r3, r3
 8003366:	ea02 0103 	and.w	r1, r2, r3
 800336a:	897b      	ldrh	r3, [r7, #10]
 800336c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003370:	7a7b      	ldrb	r3, [r7, #9]
 8003372:	041b      	lsls	r3, r3, #16
 8003374:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	431a      	orrs	r2, r3
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	431a      	orrs	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800338a:	bf00      	nop
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	03ff63ff 	.word	0x03ff63ff

0800339c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b20      	cmp	r3, #32
 80033b0:	d138      	bne.n	8003424 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033bc:	2302      	movs	r3, #2
 80033be:	e032      	b.n	8003426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2224      	movs	r2, #36	; 0x24
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0201 	bic.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6819      	ldr	r1, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	e000      	b.n	8003426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003424:	2302      	movs	r3, #2
  }
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003432:	b480      	push	{r7}
 8003434:	b085      	sub	sp, #20
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b20      	cmp	r3, #32
 8003446:	d139      	bne.n	80034bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003452:	2302      	movs	r3, #2
 8003454:	e033      	b.n	80034be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2224      	movs	r2, #36	; 0x24
 8003462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0201 	bic.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003484:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	e000      	b.n	80034be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034bc:	2302      	movs	r3, #2
  }
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034cc:	b08b      	sub	sp, #44	; 0x2c
 80034ce:	af06      	add	r7, sp, #24
 80034d0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0d7      	b.n	800368c <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d106      	bne.n	80034f6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7fd fe31 	bl	8001158 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2203      	movs	r2, #3
 80034fa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f002 fe96 	bl	8006234 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003508:	2300      	movs	r3, #0
 800350a:	73fb      	strb	r3, [r7, #15]
 800350c:	e04c      	b.n	80035a8 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	440b      	add	r3, r1
 800351e:	3301      	adds	r3, #1
 8003520:	2201      	movs	r2, #1
 8003522:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	440b      	add	r3, r1
 8003534:	7bfa      	ldrb	r2, [r7, #15]
 8003536:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003538:	7bfa      	ldrb	r2, [r7, #15]
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	b298      	uxth	r0, r3
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	440b      	add	r3, r1
 800354a:	3336      	adds	r3, #54	; 0x36
 800354c:	4602      	mov	r2, r0
 800354e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	440b      	add	r3, r1
 8003560:	3303      	adds	r3, #3
 8003562:	2200      	movs	r2, #0
 8003564:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003566:	7bfa      	ldrb	r2, [r7, #15]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	440b      	add	r3, r1
 8003574:	3338      	adds	r3, #56	; 0x38
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800357a:	7bfa      	ldrb	r2, [r7, #15]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	440b      	add	r3, r1
 8003588:	333c      	adds	r3, #60	; 0x3c
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	440b      	add	r3, r1
 800359c:	3340      	adds	r3, #64	; 0x40
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	3301      	adds	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
 80035a8:	7bfa      	ldrb	r2, [r7, #15]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d3ad      	bcc.n	800350e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
 80035b6:	e044      	b.n	8003642 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035b8:	7bfa      	ldrb	r2, [r7, #15]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	440b      	add	r3, r1
 80035c6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80035ca:	2200      	movs	r2, #0
 80035cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035ce:	7bfa      	ldrb	r2, [r7, #15]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	440b      	add	r3, r1
 80035dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035e0:	7bfa      	ldrb	r2, [r7, #15]
 80035e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	440b      	add	r3, r1
 80035f2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035fa:	7bfa      	ldrb	r2, [r7, #15]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	440b      	add	r3, r1
 8003608:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003610:	7bfa      	ldrb	r2, [r7, #15]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	440b      	add	r3, r1
 800361e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003626:	7bfa      	ldrb	r2, [r7, #15]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	440b      	add	r3, r1
 8003634:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800363c:	7bfb      	ldrb	r3, [r7, #15]
 800363e:	3301      	adds	r3, #1
 8003640:	73fb      	strb	r3, [r7, #15]
 8003642:	7bfa      	ldrb	r2, [r7, #15]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	429a      	cmp	r2, r3
 800364a:	d3b5      	bcc.n	80035b8 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	687e      	ldr	r6, [r7, #4]
 8003654:	466d      	mov	r5, sp
 8003656:	f106 0410 	add.w	r4, r6, #16
 800365a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800365c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	602b      	str	r3, [r5, #0]
 8003662:	1d33      	adds	r3, r6, #4
 8003664:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003666:	6838      	ldr	r0, [r7, #0]
 8003668:	f002 fdff 	bl	800626a <USB_DevInit>

  hpcd->USB_Address = 0U;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d102      	bne.n	800368a <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f805 	bl	8003694 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003694 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	f043 0302 	orr.w	r3, r3, #2
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036ec:	4b05      	ldr	r3, [pc, #20]	; (8003704 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a04      	ldr	r2, [pc, #16]	; (8003704 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f6:	6013      	str	r3, [r2, #0]
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	58000400 	.word	0x58000400

08003708 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800370c:	4b04      	ldr	r3, [pc, #16]	; (8003720 <HAL_PWREx_GetVoltageRange+0x18>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003714:	4618      	mov	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	58000400 	.word	0x58000400

08003724 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003736:	d101      	bne.n	800373c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <LL_RCC_HSE_Enable>:
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800374c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375a:	6013      	str	r3, [r2, #0]
}
 800375c:	bf00      	nop
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <LL_RCC_HSE_Disable>:
{
 8003766:	b480      	push	{r7}
 8003768:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800376a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003778:	6013      	str	r3, [r2, #0]
}
 800377a:	bf00      	nop
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <LL_RCC_HSE_IsReady>:
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003796:	d101      	bne.n	800379c <LL_RCC_HSE_IsReady+0x18>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <LL_RCC_HSE_IsReady+0x1a>
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <LL_RCC_HSI_Enable>:
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80037ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ba:	6013      	str	r3, [r2, #0]
}
 80037bc:	bf00      	nop
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <LL_RCC_HSI_Disable>:
{
 80037c6:	b480      	push	{r7}
 80037c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80037ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037d8:	6013      	str	r3, [r2, #0]
}
 80037da:	bf00      	nop
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <LL_RCC_HSI_IsReady>:
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80037e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f6:	d101      	bne.n	80037fc <LL_RCC_HSI_IsReady+0x18>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <LL_RCC_HSI_IsReady+0x1a>
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	061b      	lsls	r3, r3, #24
 800381e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003822:	4313      	orrs	r3, r2
 8003824:	604b      	str	r3, [r1, #4]
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <LL_RCC_HSI48_Enable>:
{
 8003832:	b480      	push	{r7}
 8003834:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800383a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800383e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800384a:	bf00      	nop
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <LL_RCC_HSI48_Disable>:
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800386c:	bf00      	nop
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <LL_RCC_HSI48_IsReady>:
{
 8003876:	b480      	push	{r7}
 8003878:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800387a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b02      	cmp	r3, #2
 8003888:	d101      	bne.n	800388e <LL_RCC_HSI48_IsReady+0x18>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <LL_RCC_HSI48_IsReady+0x1a>
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <LL_RCC_LSE_Enable>:
{
 800389a:	b480      	push	{r7}
 800389c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800389e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038aa:	f043 0301 	orr.w	r3, r3, #1
 80038ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038b2:	bf00      	nop
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <LL_RCC_LSE_Disable>:
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038d4:	bf00      	nop
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <LL_RCC_LSE_EnableBypass>:
{
 80038de:	b480      	push	{r7}
 80038e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80038e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038ee:	f043 0304 	orr.w	r3, r3, #4
 80038f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038f6:	bf00      	nop
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <LL_RCC_LSE_DisableBypass>:
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003910:	f023 0304 	bic.w	r3, r3, #4
 8003914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003918:	bf00      	nop
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003922:	b480      	push	{r7}
 8003924:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b02      	cmp	r3, #2
 8003934:	d101      	bne.n	800393a <LL_RCC_LSE_IsReady+0x18>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <LL_RCC_LSE_IsReady+0x1a>
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800394a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003952:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800395e:	bf00      	nop
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800396c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003974:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003980:	bf00      	nop
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800398a:	b480      	push	{r7}
 800398c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800398e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b02      	cmp	r3, #2
 800399c:	d101      	bne.n	80039a2 <LL_RCC_LSI1_IsReady+0x18>
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <LL_RCC_LSI1_IsReady+0x1a>
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80039ae:	b480      	push	{r7}
 80039b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80039b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039be:	f043 0304 	orr.w	r3, r3, #4
 80039c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80039c6:	bf00      	nop
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80039d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039e0:	f023 0304 	bic.w	r3, r3, #4
 80039e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80039e8:	bf00      	nop
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80039f2:	b480      	push	{r7}
 80039f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80039f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	d101      	bne.n	8003a0a <LL_RCC_LSI2_IsReady+0x18>
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <LL_RCC_LSI2_IsReady+0x1a>
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	6013      	str	r3, [r2, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	6013      	str	r3, [r2, #0]
}
 8003a76:	bf00      	nop
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d101      	bne.n	8003a96 <LL_RCC_MSI_IsReady+0x16>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <LL_RCC_MSI_IsReady+0x18>
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ada:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2bb0      	cmp	r3, #176	; 0xb0
 8003ae0:	d901      	bls.n	8003ae6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003ae2:	23b0      	movs	r3, #176	; 0xb0
 8003ae4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8003ae6:	687b      	ldr	r3, [r7, #4]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	021b      	lsls	r3, r3, #8
 8003b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	604b      	str	r3, [r1, #4]
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f023 0203 	bic.w	r2, r3, #3
 8003b30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003b46:	b480      	push	{r7}
 8003b48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 030c 	and.w	r3, r3, #12
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003bc2:	f023 020f 	bic.w	r2, r3, #15
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	608b      	str	r3, [r1, #8]
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	608b      	str	r3, [r1, #8]
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c50:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ca6:	6013      	str	r3, [r2, #0]
}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cc4:	6013      	str	r3, [r2, #0]
}
 8003cc6:	bf00      	nop
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ce2:	d101      	bne.n	8003ce8 <LL_RCC_PLL_IsReady+0x18>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <LL_RCC_PLL_IsReady+0x1a>
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0303 	and.w	r3, r3, #3
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003d56:	b480      	push	{r7}
 8003d58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d68:	d101      	bne.n	8003d6e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d8e:	d101      	bne.n	8003d94 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db4:	d101      	bne.n	8003dba <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dd8:	d101      	bne.n	8003dde <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003dea:	b480      	push	{r7}
 8003dec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003df8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dfc:	d101      	bne.n	8003e02 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e10:	b590      	push	{r4, r7, lr}
 8003e12:	b08d      	sub	sp, #52	; 0x34
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e37e      	b.n	8004520 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 8092 	beq.w	8003f54 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e30:	f7ff fe89 	bl	8003b46 <LL_RCC_GetSysClkSource>
 8003e34:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e36:	f7ff ff82 	bl	8003d3e <LL_RCC_PLL_GetMainSource>
 8003e3a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_RCC_OscConfig+0x3e>
 8003e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e44:	2b0c      	cmp	r3, #12
 8003e46:	d14c      	bne.n	8003ee2 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d149      	bne.n	8003ee2 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e4e:	f7ff fe17 	bl	8003a80 <LL_RCC_MSI_IsReady>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <HAL_RCC_OscConfig+0x54>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e35d      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003e68:	f7ff fe2f 	bl	8003aca <LL_RCC_MSI_GetRange>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	429c      	cmp	r4, r3
 8003e70:	d914      	bls.n	8003e9c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fd42 	bl	8004900 <RCC_SetFlashLatencyFromMSIRange>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e34c      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff fe09 	bl	8003aa2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff fe2d 	bl	8003af4 <LL_RCC_MSI_SetCalibTrimming>
 8003e9a:	e013      	b.n	8003ec4 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff fdfe 	bl	8003aa2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff fe22 	bl	8003af4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fd23 	bl	8004900 <RCC_SetFlashLatencyFromMSIRange>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e32d      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003ec4:	f000 fcdc 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	4ab3      	ldr	r2, [pc, #716]	; (8004198 <HAL_RCC_OscConfig+0x388>)
 8003ecc:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ece:	4bb3      	ldr	r3, [pc, #716]	; (800419c <HAL_RCC_OscConfig+0x38c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fd fa4e 	bl	8001374 <HAL_InitTick>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d039      	beq.n	8003f52 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e31e      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01e      	beq.n	8003f28 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003eea:	f7ff fdab 	bl	8003a44 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003eee:	f7fd fa8f 	bl	8001410 <HAL_GetTick>
 8003ef2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ef6:	f7fd fa8b 	bl	8001410 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e30b      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003f08:	f7ff fdba 	bl	8003a80 <LL_RCC_MSI_IsReady>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f1      	beq.n	8003ef6 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff fdc3 	bl	8003aa2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff fde7 	bl	8003af4 <LL_RCC_MSI_SetCalibTrimming>
 8003f26:	e015      	b.n	8003f54 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f28:	f7ff fd9b 	bl	8003a62 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f2c:	f7fd fa70 	bl	8001410 <HAL_GetTick>
 8003f30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f34:	f7fd fa6c 	bl	8001410 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e2ec      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003f46:	f7ff fd9b 	bl	8003a80 <LL_RCC_MSI_IsReady>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1f1      	bne.n	8003f34 <HAL_RCC_OscConfig+0x124>
 8003f50:	e000      	b.n	8003f54 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d04e      	beq.n	8003ffe <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f60:	f7ff fdf1 	bl	8003b46 <LL_RCC_GetSysClkSource>
 8003f64:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f66:	f7ff feea 	bl	8003d3e <LL_RCC_PLL_GetMainSource>
 8003f6a:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d005      	beq.n	8003f7e <HAL_RCC_OscConfig+0x16e>
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	2b0c      	cmp	r3, #12
 8003f76:	d10d      	bne.n	8003f94 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d10a      	bne.n	8003f94 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f7e:	f7ff fc01 	bl	8003784 <LL_RCC_HSE_IsReady>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d039      	beq.n	8003ffc <HAL_RCC_OscConfig+0x1ec>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d135      	bne.n	8003ffc <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e2c5      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f9c:	d102      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x194>
 8003f9e:	f7ff fbd3 	bl	8003748 <LL_RCC_HSE_Enable>
 8003fa2:	e001      	b.n	8003fa8 <HAL_RCC_OscConfig+0x198>
 8003fa4:	f7ff fbdf 	bl	8003766 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d012      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb0:	f7fd fa2e 	bl	8001410 <HAL_GetTick>
 8003fb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb8:	f7fd fa2a 	bl	8001410 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b64      	cmp	r3, #100	; 0x64
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e2aa      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003fca:	f7ff fbdb 	bl	8003784 <LL_RCC_HSE_IsReady>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0f1      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x1a8>
 8003fd4:	e013      	b.n	8003ffe <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd6:	f7fd fa1b 	bl	8001410 <HAL_GetTick>
 8003fda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fde:	f7fd fa17 	bl	8001410 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b64      	cmp	r3, #100	; 0x64
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e297      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003ff0:	f7ff fbc8 	bl	8003784 <LL_RCC_HSE_IsReady>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f1      	bne.n	8003fde <HAL_RCC_OscConfig+0x1ce>
 8003ffa:	e000      	b.n	8003ffe <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d051      	beq.n	80040ae <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800400a:	f7ff fd9c 	bl	8003b46 <LL_RCC_GetSysClkSource>
 800400e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004010:	f7ff fe95 	bl	8003d3e <LL_RCC_PLL_GetMainSource>
 8004014:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	2b04      	cmp	r3, #4
 800401a:	d005      	beq.n	8004028 <HAL_RCC_OscConfig+0x218>
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2b0c      	cmp	r3, #12
 8004020:	d113      	bne.n	800404a <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d110      	bne.n	800404a <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004028:	f7ff fbdc 	bl	80037e4 <LL_RCC_HSI_IsReady>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <HAL_RCC_OscConfig+0x22e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e270      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff fbe0 	bl	8003808 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004048:	e031      	b.n	80040ae <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d019      	beq.n	8004086 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004052:	f7ff fba9 	bl	80037a8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004056:	f7fd f9db 	bl	8001410 <HAL_GetTick>
 800405a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800405e:	f7fd f9d7 	bl	8001410 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e257      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004070:	f7ff fbb8 	bl	80037e4 <LL_RCC_HSI_IsReady>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0f1      	beq.n	800405e <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fbc2 	bl	8003808 <LL_RCC_HSI_SetCalibTrimming>
 8004084:	e013      	b.n	80040ae <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004086:	f7ff fb9e 	bl	80037c6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408a:	f7fd f9c1 	bl	8001410 <HAL_GetTick>
 800408e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004092:	f7fd f9bd 	bl	8001410 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e23d      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80040a4:	f7ff fb9e 	bl	80037e4 <LL_RCC_HSI_IsReady>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f1      	bne.n	8004092 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 80a3 	beq.w	800420e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d076      	beq.n	80041be <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d046      	beq.n	800416a <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80040dc:	f7ff fc55 	bl	800398a <LL_RCC_LSI1_IsReady>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d113      	bne.n	800410e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80040e6:	f7ff fc2e 	bl	8003946 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040ea:	f7fd f991 	bl	8001410 <HAL_GetTick>
 80040ee:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80040f2:	f7fd f98d 	bl	8001410 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e20d      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004104:	f7ff fc41 	bl	800398a <LL_RCC_LSI1_IsReady>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f1      	beq.n	80040f2 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800410e:	f7ff fc4e 	bl	80039ae <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004112:	f7fd f97d 	bl	8001410 <HAL_GetTick>
 8004116:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800411a:	f7fd f979 	bl	8001410 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b03      	cmp	r3, #3
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e1f9      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800412c:	f7ff fc61 	bl	80039f2 <LL_RCC_LSI2_IsReady>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0f1      	beq.n	800411a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff fc6b 	bl	8003a16 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004140:	f7ff fc12 	bl	8003968 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004144:	f7fd f964 	bl	8001410 <HAL_GetTick>
 8004148:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800414c:	f7fd f960 	bl	8001410 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e1e0      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800415e:	f7ff fc14 	bl	800398a <LL_RCC_LSI1_IsReady>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1f1      	bne.n	800414c <HAL_RCC_OscConfig+0x33c>
 8004168:	e051      	b.n	800420e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800416a:	f7ff fbec 	bl	8003946 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416e:	f7fd f94f 	bl	8001410 <HAL_GetTick>
 8004172:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004176:	f7fd f94b 	bl	8001410 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e1cb      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004188:	f7ff fbff 	bl	800398a <LL_RCC_LSI1_IsReady>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f1      	beq.n	8004176 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004192:	f7ff fc1d 	bl	80039d0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004196:	e00c      	b.n	80041b2 <HAL_RCC_OscConfig+0x3a2>
 8004198:	20000004 	.word	0x20000004
 800419c:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80041a0:	f7fd f936 	bl	8001410 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e1b6      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80041b2:	f7ff fc1e 	bl	80039f2 <LL_RCC_LSI2_IsReady>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1f1      	bne.n	80041a0 <HAL_RCC_OscConfig+0x390>
 80041bc:	e027      	b.n	800420e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80041be:	f7ff fc07 	bl	80039d0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c2:	f7fd f925 	bl	8001410 <HAL_GetTick>
 80041c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80041ca:	f7fd f921 	bl	8001410 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e1a1      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80041dc:	f7ff fc09 	bl	80039f2 <LL_RCC_LSI2_IsReady>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f1      	bne.n	80041ca <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80041e6:	f7ff fbbf 	bl	8003968 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ea:	f7fd f911 	bl	8001410 <HAL_GetTick>
 80041ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80041f2:	f7fd f90d 	bl	8001410 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e18d      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004204:	f7ff fbc1 	bl	800398a <LL_RCC_LSI1_IsReady>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f1      	bne.n	80041f2 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b00      	cmp	r3, #0
 8004218:	d05b      	beq.n	80042d2 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800421a:	4bb5      	ldr	r3, [pc, #724]	; (80044f0 <HAL_RCC_OscConfig+0x6e0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004222:	2b00      	cmp	r3, #0
 8004224:	d114      	bne.n	8004250 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004226:	f7ff fa5f 	bl	80036e8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800422a:	f7fd f8f1 	bl	8001410 <HAL_GetTick>
 800422e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004232:	f7fd f8ed 	bl	8001410 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e16d      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004244:	4baa      	ldr	r3, [pc, #680]	; (80044f0 <HAL_RCC_OscConfig+0x6e0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0f0      	beq.n	8004232 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d102      	bne.n	800425e <HAL_RCC_OscConfig+0x44e>
 8004258:	f7ff fb1f 	bl	800389a <LL_RCC_LSE_Enable>
 800425c:	e00c      	b.n	8004278 <HAL_RCC_OscConfig+0x468>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b05      	cmp	r3, #5
 8004264:	d104      	bne.n	8004270 <HAL_RCC_OscConfig+0x460>
 8004266:	f7ff fb3a 	bl	80038de <LL_RCC_LSE_EnableBypass>
 800426a:	f7ff fb16 	bl	800389a <LL_RCC_LSE_Enable>
 800426e:	e003      	b.n	8004278 <HAL_RCC_OscConfig+0x468>
 8004270:	f7ff fb24 	bl	80038bc <LL_RCC_LSE_Disable>
 8004274:	f7ff fb44 	bl	8003900 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d014      	beq.n	80042aa <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004280:	f7fd f8c6 	bl	8001410 <HAL_GetTick>
 8004284:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004286:	e00a      	b.n	800429e <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004288:	f7fd f8c2 	bl	8001410 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	f241 3288 	movw	r2, #5000	; 0x1388
 8004296:	4293      	cmp	r3, r2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e140      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800429e:	f7ff fb40 	bl	8003922 <LL_RCC_LSE_IsReady>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0ef      	beq.n	8004288 <HAL_RCC_OscConfig+0x478>
 80042a8:	e013      	b.n	80042d2 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042aa:	f7fd f8b1 	bl	8001410 <HAL_GetTick>
 80042ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80042b0:	e00a      	b.n	80042c8 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b2:	f7fd f8ad 	bl	8001410 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e12b      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80042c8:	f7ff fb2b 	bl	8003922 <LL_RCC_LSE_IsReady>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1ef      	bne.n	80042b2 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d02c      	beq.n	8004338 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d014      	beq.n	8004310 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042e6:	f7ff faa4 	bl	8003832 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ea:	f7fd f891 	bl	8001410 <HAL_GetTick>
 80042ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042f2:	f7fd f88d 	bl	8001410 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e10d      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004304:	f7ff fab7 	bl	8003876 <LL_RCC_HSI48_IsReady>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f1      	beq.n	80042f2 <HAL_RCC_OscConfig+0x4e2>
 800430e:	e013      	b.n	8004338 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004310:	f7ff faa0 	bl	8003854 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004314:	f7fd f87c 	bl	8001410 <HAL_GetTick>
 8004318:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800431c:	f7fd f878 	bl	8001410 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e0f8      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800432e:	f7ff faa2 	bl	8003876 <LL_RCC_HSI48_IsReady>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1f1      	bne.n	800431c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 80ee 	beq.w	800451e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004342:	f7ff fc00 	bl	8003b46 <LL_RCC_GetSysClkSource>
 8004346:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	2b02      	cmp	r3, #2
 8004356:	f040 80af 	bne.w	80044b8 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f003 0203 	and.w	r2, r3, #3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	429a      	cmp	r2, r3
 8004366:	d123      	bne.n	80043b0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004372:	429a      	cmp	r2, r3
 8004374:	d11c      	bne.n	80043b0 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	0a1b      	lsrs	r3, r3, #8
 800437a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004382:	429a      	cmp	r2, r3
 8004384:	d114      	bne.n	80043b0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004390:	429a      	cmp	r2, r3
 8004392:	d10d      	bne.n	80043b0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800439e:	429a      	cmp	r2, r3
 80043a0:	d106      	bne.n	80043b0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d05d      	beq.n	800446c <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	2b0c      	cmp	r3, #12
 80043b4:	d058      	beq.n	8004468 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e0ab      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043c8:	f7ff fc73 	bl	8003cb2 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043cc:	f7fd f820 	bl	8001410 <HAL_GetTick>
 80043d0:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fd f81c 	bl	8001410 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e09c      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1ef      	bne.n	80043d4 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	4b3e      	ldr	r3, [pc, #248]	; (80044f4 <HAL_RCC_OscConfig+0x6e4>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004406:	4311      	orrs	r1, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800440c:	0212      	lsls	r2, r2, #8
 800440e:	4311      	orrs	r1, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004414:	4311      	orrs	r1, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800441a:	4311      	orrs	r1, r2
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004420:	430a      	orrs	r2, r1
 8004422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004426:	4313      	orrs	r3, r2
 8004428:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800442a:	f7ff fc33 	bl	8003c94 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800442e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443c:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800443e:	f7fc ffe7 	bl	8001410 <HAL_GetTick>
 8004442:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004446:	f7fc ffe3 	bl	8001410 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e063      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0ef      	beq.n	8004446 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004466:	e05a      	b.n	800451e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e059      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800446c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d151      	bne.n	800451e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800447a:	f7ff fc0b 	bl	8003c94 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800447e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800448e:	f7fc ffbf 	bl	8001410 <HAL_GetTick>
 8004492:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004496:	f7fc ffbb 	bl	8001410 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e03b      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0ef      	beq.n	8004496 <HAL_RCC_OscConfig+0x686>
 80044b6:	e032      	b.n	800451e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	2b0c      	cmp	r3, #12
 80044bc:	d02d      	beq.n	800451a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044be:	f7ff fbf8 	bl	8003cb2 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80044c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044cc:	f023 0303 	bic.w	r3, r3, #3
 80044d0:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80044d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044dc:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80044e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e6:	f7fc ff93 	bl	8001410 <HAL_GetTick>
 80044ea:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ec:	e00d      	b.n	800450a <HAL_RCC_OscConfig+0x6fa>
 80044ee:	bf00      	nop
 80044f0:	58000400 	.word	0x58000400
 80044f4:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f8:	f7fc ff8a 	bl	8001410 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e00a      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800450a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1ef      	bne.n	80044f8 <HAL_RCC_OscConfig+0x6e8>
 8004518:	e001      	b.n	800451e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3734      	adds	r7, #52	; 0x34
 8004524:	46bd      	mov	sp, r7
 8004526:	bd90      	pop	{r4, r7, pc}

08004528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e12d      	b.n	8004798 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800453c:	4b98      	ldr	r3, [pc, #608]	; (80047a0 <HAL_RCC_ClockConfig+0x278>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d91b      	bls.n	8004582 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454a:	4b95      	ldr	r3, [pc, #596]	; (80047a0 <HAL_RCC_ClockConfig+0x278>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f023 0207 	bic.w	r2, r3, #7
 8004552:	4993      	ldr	r1, [pc, #588]	; (80047a0 <HAL_RCC_ClockConfig+0x278>)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	4313      	orrs	r3, r2
 8004558:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800455a:	f7fc ff59 	bl	8001410 <HAL_GetTick>
 800455e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004560:	e008      	b.n	8004574 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004562:	f7fc ff55 	bl	8001410 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e111      	b.n	8004798 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004574:	4b8a      	ldr	r3, [pc, #552]	; (80047a0 <HAL_RCC_ClockConfig+0x278>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d1ef      	bne.n	8004562 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d016      	beq.n	80045bc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff fae3 	bl	8003b5e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004598:	f7fc ff3a 	bl	8001410 <HAL_GetTick>
 800459c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80045a0:	f7fc ff36 	bl	8001410 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e0f2      	b.n	8004798 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80045b2:	f7ff fbd0 	bl	8003d56 <LL_RCC_IsActiveFlag_HPRE>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0f1      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d016      	beq.n	80045f6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff fada 	bl	8003b86 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80045d2:	f7fc ff1d 	bl	8001410 <HAL_GetTick>
 80045d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80045da:	f7fc ff19 	bl	8001410 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e0d5      	b.n	8004798 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80045ec:	f7ff fbc5 	bl	8003d7a <LL_RCC_IsActiveFlag_C2HPRE>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f1      	beq.n	80045da <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d016      	beq.n	8004630 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff fad3 	bl	8003bb2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800460c:	f7fc ff00 	bl	8001410 <HAL_GetTick>
 8004610:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004612:	e008      	b.n	8004626 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004614:	f7fc fefc 	bl	8001410 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e0b8      	b.n	8004798 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004626:	f7ff fbbb 	bl	8003da0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0f1      	beq.n	8004614 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d016      	beq.n	800466a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff facd 	bl	8003be0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004646:	f7fc fee3 	bl	8001410 <HAL_GetTick>
 800464a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800464c:	e008      	b.n	8004660 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800464e:	f7fc fedf 	bl	8001410 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e09b      	b.n	8004798 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004660:	f7ff fbb1 	bl	8003dc6 <LL_RCC_IsActiveFlag_PPRE1>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f1      	beq.n	800464e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d017      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff fac3 	bl	8003c08 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004682:	f7fc fec5 	bl	8001410 <HAL_GetTick>
 8004686:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004688:	e008      	b.n	800469c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800468a:	f7fc fec1 	bl	8001410 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e07d      	b.n	8004798 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800469c:	f7ff fba5 	bl	8003dea <LL_RCC_IsActiveFlag_PPRE2>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0f1      	beq.n	800468a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d043      	beq.n	800473a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d106      	bne.n	80046c8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80046ba:	f7ff f863 	bl	8003784 <LL_RCC_HSE_IsReady>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d11e      	bne.n	8004702 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e067      	b.n	8004798 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d106      	bne.n	80046de <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80046d0:	f7ff fafe 	bl	8003cd0 <LL_RCC_PLL_IsReady>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d113      	bne.n	8004702 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e05c      	b.n	8004798 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80046e6:	f7ff f9cb 	bl	8003a80 <LL_RCC_MSI_IsReady>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d108      	bne.n	8004702 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e051      	b.n	8004798 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80046f4:	f7ff f876 	bl	80037e4 <LL_RCC_HSI_IsReady>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e04a      	b.n	8004798 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff fa09 	bl	8003b1e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800470c:	f7fc fe80 	bl	8001410 <HAL_GetTick>
 8004710:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004712:	e00a      	b.n	800472a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004714:	f7fc fe7c 	bl	8001410 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004722:	4293      	cmp	r3, r2
 8004724:	d901      	bls.n	800472a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e036      	b.n	8004798 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800472a:	f7ff fa0c 	bl	8003b46 <LL_RCC_GetSysClkSource>
 800472e:	4602      	mov	r2, r0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	429a      	cmp	r2, r3
 8004738:	d1ec      	bne.n	8004714 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800473a:	4b19      	ldr	r3, [pc, #100]	; (80047a0 <HAL_RCC_ClockConfig+0x278>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d21b      	bcs.n	8004780 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004748:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <HAL_RCC_ClockConfig+0x278>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f023 0207 	bic.w	r2, r3, #7
 8004750:	4913      	ldr	r1, [pc, #76]	; (80047a0 <HAL_RCC_ClockConfig+0x278>)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	4313      	orrs	r3, r2
 8004756:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004758:	f7fc fe5a 	bl	8001410 <HAL_GetTick>
 800475c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800475e:	e008      	b.n	8004772 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004760:	f7fc fe56 	bl	8001410 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e012      	b.n	8004798 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004772:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_RCC_ClockConfig+0x278>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d1ef      	bne.n	8004760 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004780:	f000 f87e 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 8004784:	4603      	mov	r3, r0
 8004786:	4a07      	ldr	r2, [pc, #28]	; (80047a4 <HAL_RCC_ClockConfig+0x27c>)
 8004788:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800478a:	f7fc fe4d 	bl	8001428 <HAL_GetTickPrio>
 800478e:	4603      	mov	r3, r0
 8004790:	4618      	mov	r0, r3
 8004792:	f7fc fdef 	bl	8001374 <HAL_InitTick>
 8004796:	4603      	mov	r3, r0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	58004000 	.word	0x58004000
 80047a4:	20000004 	.word	0x20000004

080047a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047a8:	b590      	push	{r4, r7, lr}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ae:	f7ff f9ca 	bl	8003b46 <LL_RCC_GetSysClkSource>
 80047b2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10a      	bne.n	80047d0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80047ba:	f7ff f986 	bl	8003aca <LL_RCC_MSI_GetRange>
 80047be:	4603      	mov	r3, r0
 80047c0:	091b      	lsrs	r3, r3, #4
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	4a2b      	ldr	r2, [pc, #172]	; (8004874 <HAL_RCC_GetSysClockFreq+0xcc>)
 80047c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	e04b      	b.n	8004868 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d102      	bne.n	80047dc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047d6:	4b28      	ldr	r3, [pc, #160]	; (8004878 <HAL_RCC_GetSysClockFreq+0xd0>)
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	e045      	b.n	8004868 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b08      	cmp	r3, #8
 80047e0:	d10a      	bne.n	80047f8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80047e2:	f7fe ff9f 	bl	8003724 <LL_RCC_HSE_IsEnabledDiv2>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d102      	bne.n	80047f2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80047ec:	4b22      	ldr	r3, [pc, #136]	; (8004878 <HAL_RCC_GetSysClockFreq+0xd0>)
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	e03a      	b.n	8004868 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80047f2:	4b22      	ldr	r3, [pc, #136]	; (800487c <HAL_RCC_GetSysClockFreq+0xd4>)
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	e037      	b.n	8004868 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80047f8:	f7ff faa1 	bl	8003d3e <LL_RCC_PLL_GetMainSource>
 80047fc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b02      	cmp	r3, #2
 8004802:	d003      	beq.n	800480c <HAL_RCC_GetSysClockFreq+0x64>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b03      	cmp	r3, #3
 8004808:	d003      	beq.n	8004812 <HAL_RCC_GetSysClockFreq+0x6a>
 800480a:	e00d      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800480c:	4b1a      	ldr	r3, [pc, #104]	; (8004878 <HAL_RCC_GetSysClockFreq+0xd0>)
 800480e:	60bb      	str	r3, [r7, #8]
        break;
 8004810:	e015      	b.n	800483e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004812:	f7fe ff87 	bl	8003724 <LL_RCC_HSE_IsEnabledDiv2>
 8004816:	4603      	mov	r3, r0
 8004818:	2b01      	cmp	r3, #1
 800481a:	d102      	bne.n	8004822 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800481c:	4b16      	ldr	r3, [pc, #88]	; (8004878 <HAL_RCC_GetSysClockFreq+0xd0>)
 800481e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004820:	e00d      	b.n	800483e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004822:	4b16      	ldr	r3, [pc, #88]	; (800487c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004824:	60bb      	str	r3, [r7, #8]
        break;
 8004826:	e00a      	b.n	800483e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004828:	f7ff f94f 	bl	8003aca <LL_RCC_MSI_GetRange>
 800482c:	4603      	mov	r3, r0
 800482e:	091b      	lsrs	r3, r3, #4
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	4a0f      	ldr	r2, [pc, #60]	; (8004874 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800483a:	60bb      	str	r3, [r7, #8]
        break;
 800483c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800483e:	f7ff fa59 	bl	8003cf4 <LL_RCC_PLL_GetN>
 8004842:	4602      	mov	r2, r0
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	fb03 f402 	mul.w	r4, r3, r2
 800484a:	f7ff fa6c 	bl	8003d26 <LL_RCC_PLL_GetDivider>
 800484e:	4603      	mov	r3, r0
 8004850:	091b      	lsrs	r3, r3, #4
 8004852:	3301      	adds	r3, #1
 8004854:	fbb4 f4f3 	udiv	r4, r4, r3
 8004858:	f7ff fa59 	bl	8003d0e <LL_RCC_PLL_GetR>
 800485c:	4603      	mov	r3, r0
 800485e:	0f5b      	lsrs	r3, r3, #29
 8004860:	3301      	adds	r3, #1
 8004862:	fbb4 f3f3 	udiv	r3, r4, r3
 8004866:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004868:	68fb      	ldr	r3, [r7, #12]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	bd90      	pop	{r4, r7, pc}
 8004872:	bf00      	nop
 8004874:	08006494 	.word	0x08006494
 8004878:	00f42400 	.word	0x00f42400
 800487c:	01e84800 	.word	0x01e84800

08004880 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004880:	b598      	push	{r3, r4, r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004884:	f7ff ff90 	bl	80047a8 <HAL_RCC_GetSysClockFreq>
 8004888:	4604      	mov	r4, r0
 800488a:	f7ff f9d1 	bl	8003c30 <LL_RCC_GetAHBPrescaler>
 800488e:	4603      	mov	r3, r0
 8004890:	091b      	lsrs	r3, r3, #4
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	4a03      	ldr	r2, [pc, #12]	; (80048a4 <HAL_RCC_GetHCLKFreq+0x24>)
 8004898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800489c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	bd98      	pop	{r3, r4, r7, pc}
 80048a4:	08006434 	.word	0x08006434

080048a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a8:	b598      	push	{r3, r4, r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80048ac:	f7ff ffe8 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 80048b0:	4604      	mov	r4, r0
 80048b2:	f7ff f9d7 	bl	8003c64 <LL_RCC_GetAPB1Prescaler>
 80048b6:	4603      	mov	r3, r0
 80048b8:	0a1b      	lsrs	r3, r3, #8
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	4a04      	ldr	r2, [pc, #16]	; (80048d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048c4:	f003 031f 	and.w	r3, r3, #31
 80048c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	bd98      	pop	{r3, r4, r7, pc}
 80048d0:	08006474 	.word	0x08006474

080048d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048d4:	b598      	push	{r3, r4, r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80048d8:	f7ff ffd2 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 80048dc:	4604      	mov	r4, r0
 80048de:	f7ff f9cd 	bl	8003c7c <LL_RCC_GetAPB2Prescaler>
 80048e2:	4603      	mov	r3, r0
 80048e4:	0adb      	lsrs	r3, r3, #11
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	4a04      	ldr	r2, [pc, #16]	; (80048fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80048ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	bd98      	pop	{r3, r4, r7, pc}
 80048fc:	08006474 	.word	0x08006474

08004900 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004900:	b590      	push	{r4, r7, lr}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2bb0      	cmp	r3, #176	; 0xb0
 800490c:	d903      	bls.n	8004916 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800490e:	4b15      	ldr	r3, [pc, #84]	; (8004964 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	e007      	b.n	8004926 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	091b      	lsrs	r3, r3, #4
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	4a11      	ldr	r2, [pc, #68]	; (8004964 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004924:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004926:	f7ff f98f 	bl	8003c48 <LL_RCC_GetAHB4Prescaler>
 800492a:	4603      	mov	r3, r0
 800492c:	091b      	lsrs	r3, r3, #4
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	4a0d      	ldr	r2, [pc, #52]	; (8004968 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	fbb2 f3f3 	udiv	r3, r2, r3
 800493e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4a0a      	ldr	r2, [pc, #40]	; (800496c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004944:	fba2 2303 	umull	r2, r3, r2, r3
 8004948:	0c9c      	lsrs	r4, r3, #18
 800494a:	f7fe fedd 	bl	8003708 <HAL_PWREx_GetVoltageRange>
 800494e:	4603      	mov	r3, r0
 8004950:	4619      	mov	r1, r3
 8004952:	4620      	mov	r0, r4
 8004954:	f000 f80c 	bl	8004970 <RCC_SetFlashLatency>
 8004958:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	bd90      	pop	{r4, r7, pc}
 8004962:	bf00      	nop
 8004964:	08006494 	.word	0x08006494
 8004968:	08006434 	.word	0x08006434
 800496c:	431bde83 	.word	0x431bde83

08004970 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004970:	b590      	push	{r4, r7, lr}
 8004972:	b093      	sub	sp, #76	; 0x4c
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800497a:	4b39      	ldr	r3, [pc, #228]	; (8004a60 <RCC_SetFlashLatency+0xf0>)
 800497c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004980:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004982:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004986:	4a37      	ldr	r2, [pc, #220]	; (8004a64 <RCC_SetFlashLatency+0xf4>)
 8004988:	f107 031c 	add.w	r3, r7, #28
 800498c:	ca07      	ldmia	r2, {r0, r1, r2}
 800498e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004992:	4b35      	ldr	r3, [pc, #212]	; (8004a68 <RCC_SetFlashLatency+0xf8>)
 8004994:	f107 040c 	add.w	r4, r7, #12
 8004998:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800499a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800499e:	2300      	movs	r3, #0
 80049a0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049a8:	d11c      	bne.n	80049e4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80049aa:	2300      	movs	r3, #0
 80049ac:	643b      	str	r3, [r7, #64]	; 0x40
 80049ae:	e015      	b.n	80049dc <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80049b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80049b8:	4413      	add	r3, r2
 80049ba:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d808      	bhi.n	80049d6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80049c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80049cc:	4413      	add	r3, r2
 80049ce:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80049d2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80049d4:	e022      	b.n	8004a1c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80049d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d8:	3301      	adds	r3, #1
 80049da:	643b      	str	r3, [r7, #64]	; 0x40
 80049dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d9e6      	bls.n	80049b0 <RCC_SetFlashLatency+0x40>
 80049e2:	e01b      	b.n	8004a1c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80049e4:	2300      	movs	r3, #0
 80049e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e8:	e015      	b.n	8004a16 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80049ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80049f2:	4413      	add	r3, r2
 80049f4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d808      	bhi.n	8004a10 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80049fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a06:	4413      	add	r3, r2
 8004a08:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004a0c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004a0e:	e005      	b.n	8004a1c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a12:	3301      	adds	r3, #1
 8004a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d9e6      	bls.n	80049ea <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004a1c:	4b13      	ldr	r3, [pc, #76]	; (8004a6c <RCC_SetFlashLatency+0xfc>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f023 0207 	bic.w	r2, r3, #7
 8004a24:	4911      	ldr	r1, [pc, #68]	; (8004a6c <RCC_SetFlashLatency+0xfc>)
 8004a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004a2c:	f7fc fcf0 	bl	8001410 <HAL_GetTick>
 8004a30:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004a32:	e008      	b.n	8004a46 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004a34:	f7fc fcec 	bl	8001410 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e007      	b.n	8004a56 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004a46:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <RCC_SetFlashLatency+0xfc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d1ef      	bne.n	8004a34 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	374c      	adds	r7, #76	; 0x4c
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd90      	pop	{r4, r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	08006408 	.word	0x08006408
 8004a64:	08006418 	.word	0x08006418
 8004a68:	08006424 	.word	0x08006424
 8004a6c:	58004000 	.word	0x58004000

08004a70 <LL_RCC_LSE_IsEnabled>:
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <LL_RCC_LSE_IsEnabled+0x18>
 8004a84:	2301      	movs	r3, #1
 8004a86:	e000      	b.n	8004a8a <LL_RCC_LSE_IsEnabled+0x1a>
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <LL_RCC_LSE_IsReady>:
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d101      	bne.n	8004aac <LL_RCC_LSE_IsReady+0x18>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e000      	b.n	8004aae <LL_RCC_LSE_IsReady+0x1a>
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <LL_RCC_MSI_EnablePLLMode>:
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8004abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ac6:	f043 0304 	orr.w	r3, r3, #4
 8004aca:	6013      	str	r3, [r2, #0]
}
 8004acc:	bf00      	nop
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <LL_RCC_SetRFWKPClockSource>:
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ae6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004aea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <LL_RCC_SetSMPSClockSource>:
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	f023 0203 	bic.w	r2, r3, #3
 8004b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <LL_RCC_SetSMPSPrescaler>:
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <LL_RCC_SetUSARTClockSource>:
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b62:	f023 0203 	bic.w	r2, r3, #3
 8004b66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <LL_RCC_SetLPUARTClockSource>:
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <LL_RCC_SetI2CClockSource>:
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	091b      	lsrs	r3, r3, #4
 8004bbe:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	401a      	ands	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004bce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <LL_RCC_SetLPTIMClockSource>:
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	0c1b      	lsrs	r3, r3, #16
 8004bf8:	041b      	lsls	r3, r3, #16
 8004bfa:	43db      	mvns	r3, r3
 8004bfc:	401a      	ands	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	041b      	lsls	r3, r3, #16
 8004c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <LL_RCC_SetSAIClockSource>:
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <LL_RCC_SetRNGClockSource>:
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c54:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004c58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <LL_RCC_SetCLK48ClockSource>:
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <LL_RCC_SetUSBClockSource>:
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff ffe3 	bl	8004c70 <LL_RCC_SetCLK48ClockSource>
}
 8004caa:	bf00      	nop
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <LL_RCC_SetADCClockSource>:
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <LL_RCC_SetRTCClockSource>:
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <LL_RCC_GetRTCClockSource>:
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <LL_RCC_ForceBackupDomainReset>:
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d3c:	bf00      	nop
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004d46:	b480      	push	{r7}
 8004d48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d5e:	bf00      	nop
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <LL_RCC_PLLSAI1_Enable>:
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d7a:	6013      	str	r3, [r2, #0]
}
 8004d7c:	bf00      	nop
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <LL_RCC_PLLSAI1_Disable>:
{
 8004d86:	b480      	push	{r7}
 8004d88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d98:	6013      	str	r3, [r2, #0]
}
 8004d9a:	bf00      	nop
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <LL_RCC_PLLSAI1_IsReady>:
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004db6:	d101      	bne.n	8004dbc <LL_RCC_PLLSAI1_IsReady+0x18>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d034      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004dec:	d021      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004dee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004df2:	d81b      	bhi.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004df4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004df8:	d01d      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004dfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dfe:	d815      	bhi.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00b      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004e04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e08:	d110      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e18:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e1a:	e00d      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 f94d 	bl	80050c0 <RCCEx_PLLSAI1_ConfigNP>
 8004e26:	4603      	mov	r3, r0
 8004e28:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e2a:	e005      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	77fb      	strb	r3, [r7, #31]
        break;
 8004e30:	e002      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004e32:	bf00      	nop
 8004e34:	e000      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e38:	7ffb      	ldrb	r3, [r7, #31]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d105      	bne.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff fee8 	bl	8004c18 <LL_RCC_SetSAIClockSource>
 8004e48:	e001      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4a:	7ffb      	ldrb	r3, [r7, #31]
 8004e4c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d046      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004e5a:	f7ff ff56 	bl	8004d0a <LL_RCC_GetRTCClockSource>
 8004e5e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d03c      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004e6a:	f7fe fc3d 	bl	80036e8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d105      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff ff30 	bl	8004cde <LL_RCC_SetRTCClockSource>
 8004e7e:	e02e      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e88:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004e8a:	f7ff ff4b 	bl	8004d24 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004e8e:	f7ff ff5a 	bl	8004d46 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004ea0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004eaa:	f7ff fde1 	bl	8004a70 <LL_RCC_LSE_IsEnabled>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d114      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004eb4:	f7fc faac 	bl	8001410 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004eba:	e00b      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ebc:	f7fc faa8 	bl	8001410 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d902      	bls.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	77fb      	strb	r3, [r7, #31]
              break;
 8004ed2:	e004      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004ed4:	f7ff fdde 	bl	8004a94 <LL_RCC_LSE_IsReady>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d1ee      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004ede:	7ffb      	ldrb	r3, [r7, #31]
 8004ee0:	77bb      	strb	r3, [r7, #30]
 8004ee2:	e001      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee4:	7ffb      	ldrb	r3, [r7, #31]
 8004ee6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d004      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff fe2a 	bl	8004b52 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d004      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff fe35 	bl	8004b7e <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d004      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff fe5d 	bl	8004be4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0320 	and.w	r3, r3, #32
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d004      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff fe52 	bl	8004be4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d004      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff fe2a 	bl	8004baa <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d004      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff fe1f 	bl	8004baa <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d022      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff fe8d 	bl	8004c9c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f8a:	d107      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f9a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fa4:	d10b      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 f8e3 	bl	8005176 <RCCEx_PLLSAI1_ConfigNQ>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004fb4:	7ffb      	ldrb	r3, [r7, #31]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8004fba:	7ffb      	ldrb	r3, [r7, #31]
 8004fbc:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d02b      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd2:	d008      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fdc:	d003      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d105      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff fe2a 	bl	8004c44 <LL_RCC_SetRNGClockSource>
 8004ff0:	e00a      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	f7ff fe21 	bl	8004c44 <LL_RCC_SetRNGClockSource>
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f7ff fe34 	bl	8004c70 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005010:	d107      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800501c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005020:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800502a:	2b00      	cmp	r3, #0
 800502c:	d022      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff fe3d 	bl	8004cb2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005040:	d107      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800504c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005050:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800505a:	d10b      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3304      	adds	r3, #4
 8005060:	4618      	mov	r0, r3
 8005062:	f000 f8e3 	bl	800522c <RCCEx_PLLSAI1_ConfigNR>
 8005066:	4603      	mov	r3, r0
 8005068:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800506a:	7ffb      	ldrb	r3, [r7, #31]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8005070:	7ffb      	ldrb	r3, [r7, #31]
 8005072:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d004      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005084:	4618      	mov	r0, r3
 8005086:	f7ff fd26 	bl	8004ad6 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d009      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff fd45 	bl	8004b2a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff fd2c 	bl	8004b02 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80050aa:	7fbb      	ldrb	r3, [r7, #30]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3720      	adds	r7, #32
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80050b8:	f7ff fcfe 	bl	8004ab8 <LL_RCC_MSI_EnablePLLMode>
}
 80050bc:	bf00      	nop
 80050be:	bd80      	pop	{r7, pc}

080050c0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80050cc:	f7ff fe5b 	bl	8004d86 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050d0:	f7fc f99e 	bl	8001410 <HAL_GetTick>
 80050d4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80050d6:	e009      	b.n	80050ec <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050d8:	f7fc f99a 	bl	8001410 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d902      	bls.n	80050ec <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	73fb      	strb	r3, [r7, #15]
      break;
 80050ea:	e004      	b.n	80050f6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80050ec:	f7ff fe5a 	bl	8004da4 <LL_RCC_PLLSAI1_IsReady>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f0      	bne.n	80050d8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d137      	bne.n	800516c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80050fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005110:	4313      	orrs	r3, r2
 8005112:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005126:	4313      	orrs	r3, r2
 8005128:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800512a:	f7ff fe1d 	bl	8004d68 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800512e:	f7fc f96f 	bl	8001410 <HAL_GetTick>
 8005132:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005134:	e009      	b.n	800514a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005136:	f7fc f96b 	bl	8001410 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d902      	bls.n	800514a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	73fb      	strb	r3, [r7, #15]
        break;
 8005148:	e004      	b.n	8005154 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800514a:	f7ff fe2b 	bl	8004da4 <LL_RCC_PLLSAI1_IsReady>
 800514e:	4603      	mov	r3, r0
 8005150:	2b01      	cmp	r3, #1
 8005152:	d1f0      	bne.n	8005136 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005154:	7bfb      	ldrb	r3, [r7, #15]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d108      	bne.n	800516c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800515a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800515e:	691a      	ldr	r2, [r3, #16]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005168:	4313      	orrs	r3, r2
 800516a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800516c:	7bfb      	ldrb	r3, [r7, #15]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b084      	sub	sp, #16
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005182:	f7ff fe00 	bl	8004d86 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005186:	f7fc f943 	bl	8001410 <HAL_GetTick>
 800518a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800518c:	e009      	b.n	80051a2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800518e:	f7fc f93f 	bl	8001410 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d902      	bls.n	80051a2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	73fb      	strb	r3, [r7, #15]
      break;
 80051a0:	e004      	b.n	80051ac <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80051a2:	f7ff fdff 	bl	8004da4 <LL_RCC_PLLSAI1_IsReady>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1f0      	bne.n	800518e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d137      	bne.n	8005222 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80051b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051c6:	4313      	orrs	r3, r2
 80051c8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80051ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051dc:	4313      	orrs	r3, r2
 80051de:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80051e0:	f7ff fdc2 	bl	8004d68 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e4:	f7fc f914 	bl	8001410 <HAL_GetTick>
 80051e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80051ea:	e009      	b.n	8005200 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051ec:	f7fc f910 	bl	8001410 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d902      	bls.n	8005200 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	73fb      	strb	r3, [r7, #15]
        break;
 80051fe:	e004      	b.n	800520a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005200:	f7ff fdd0 	bl	8004da4 <LL_RCC_PLLSAI1_IsReady>
 8005204:	4603      	mov	r3, r0
 8005206:	2b01      	cmp	r3, #1
 8005208:	d1f0      	bne.n	80051ec <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d108      	bne.n	8005222 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005214:	691a      	ldr	r2, [r3, #16]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800521e:	4313      	orrs	r3, r2
 8005220:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005222:	7bfb      	ldrb	r3, [r7, #15]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005238:	f7ff fda5 	bl	8004d86 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800523c:	f7fc f8e8 	bl	8001410 <HAL_GetTick>
 8005240:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005242:	e009      	b.n	8005258 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005244:	f7fc f8e4 	bl	8001410 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d902      	bls.n	8005258 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	73fb      	strb	r3, [r7, #15]
      break;
 8005256:	e004      	b.n	8005262 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005258:	f7ff fda4 	bl	8004da4 <LL_RCC_PLLSAI1_IsReady>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1f0      	bne.n	8005244 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d137      	bne.n	80052d8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	021b      	lsls	r3, r3, #8
 8005278:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800527c:	4313      	orrs	r3, r2
 800527e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005292:	4313      	orrs	r3, r2
 8005294:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005296:	f7ff fd67 	bl	8004d68 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800529a:	f7fc f8b9 	bl	8001410 <HAL_GetTick>
 800529e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80052a0:	e009      	b.n	80052b6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052a2:	f7fc f8b5 	bl	8001410 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d902      	bls.n	80052b6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	73fb      	strb	r3, [r7, #15]
        break;
 80052b4:	e004      	b.n	80052c0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80052b6:	f7ff fd75 	bl	8004da4 <LL_RCC_PLLSAI1_IsReady>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d1f0      	bne.n	80052a2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80052c0:	7bfb      	ldrb	r3, [r7, #15]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d108      	bne.n	80052d8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80052c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052d4:	4313      	orrs	r3, r2
 80052d6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e049      	b.n	8005388 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d106      	bne.n	800530e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7fb fee5 	bl	80010d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2202      	movs	r2, #2
 8005312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3304      	adds	r3, #4
 800531e:	4619      	mov	r1, r3
 8005320:	4610      	mov	r0, r2
 8005322:	f000 f941 	bl	80055a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d001      	beq.n	80053a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e02e      	b.n	8005406 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a17      	ldr	r2, [pc, #92]	; (8005414 <HAL_TIM_Base_Start+0x84>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d004      	beq.n	80053c4 <HAL_TIM_Base_Start+0x34>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c2:	d115      	bne.n	80053f0 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689a      	ldr	r2, [r3, #8]
 80053ca:	4b13      	ldr	r3, [pc, #76]	; (8005418 <HAL_TIM_Base_Start+0x88>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b06      	cmp	r3, #6
 80053d4:	d015      	beq.n	8005402 <HAL_TIM_Base_Start+0x72>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053dc:	d011      	beq.n	8005402 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0201 	orr.w	r2, r2, #1
 80053ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ee:	e008      	b.n	8005402 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	e000      	b.n	8005404 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005402:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40012c00 	.word	0x40012c00
 8005418:	00010007 	.word	0x00010007

0800541c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_TIM_ConfigClockSource+0x18>
 8005430:	2302      	movs	r3, #2
 8005432:	e0b5      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x184>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005452:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005456:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800545e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005470:	d03e      	beq.n	80054f0 <HAL_TIM_ConfigClockSource+0xd4>
 8005472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005476:	f200 8087 	bhi.w	8005588 <HAL_TIM_ConfigClockSource+0x16c>
 800547a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800547e:	f000 8085 	beq.w	800558c <HAL_TIM_ConfigClockSource+0x170>
 8005482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005486:	d87f      	bhi.n	8005588 <HAL_TIM_ConfigClockSource+0x16c>
 8005488:	2b70      	cmp	r3, #112	; 0x70
 800548a:	d01a      	beq.n	80054c2 <HAL_TIM_ConfigClockSource+0xa6>
 800548c:	2b70      	cmp	r3, #112	; 0x70
 800548e:	d87b      	bhi.n	8005588 <HAL_TIM_ConfigClockSource+0x16c>
 8005490:	2b60      	cmp	r3, #96	; 0x60
 8005492:	d050      	beq.n	8005536 <HAL_TIM_ConfigClockSource+0x11a>
 8005494:	2b60      	cmp	r3, #96	; 0x60
 8005496:	d877      	bhi.n	8005588 <HAL_TIM_ConfigClockSource+0x16c>
 8005498:	2b50      	cmp	r3, #80	; 0x50
 800549a:	d03c      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0xfa>
 800549c:	2b50      	cmp	r3, #80	; 0x50
 800549e:	d873      	bhi.n	8005588 <HAL_TIM_ConfigClockSource+0x16c>
 80054a0:	2b40      	cmp	r3, #64	; 0x40
 80054a2:	d058      	beq.n	8005556 <HAL_TIM_ConfigClockSource+0x13a>
 80054a4:	2b40      	cmp	r3, #64	; 0x40
 80054a6:	d86f      	bhi.n	8005588 <HAL_TIM_ConfigClockSource+0x16c>
 80054a8:	2b30      	cmp	r3, #48	; 0x30
 80054aa:	d064      	beq.n	8005576 <HAL_TIM_ConfigClockSource+0x15a>
 80054ac:	2b30      	cmp	r3, #48	; 0x30
 80054ae:	d86b      	bhi.n	8005588 <HAL_TIM_ConfigClockSource+0x16c>
 80054b0:	2b20      	cmp	r3, #32
 80054b2:	d060      	beq.n	8005576 <HAL_TIM_ConfigClockSource+0x15a>
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	d867      	bhi.n	8005588 <HAL_TIM_ConfigClockSource+0x16c>
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d05c      	beq.n	8005576 <HAL_TIM_ConfigClockSource+0x15a>
 80054bc:	2b10      	cmp	r3, #16
 80054be:	d05a      	beq.n	8005576 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80054c0:	e062      	b.n	8005588 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	6899      	ldr	r1, [r3, #8]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f000 f949 	bl	8005768 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	609a      	str	r2, [r3, #8]
      break;
 80054ee:	e04e      	b.n	800558e <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	6899      	ldr	r1, [r3, #8]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f000 f932 	bl	8005768 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005512:	609a      	str	r2, [r3, #8]
      break;
 8005514:	e03b      	b.n	800558e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	6859      	ldr	r1, [r3, #4]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	461a      	mov	r2, r3
 8005524:	f000 f8a4 	bl	8005670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2150      	movs	r1, #80	; 0x50
 800552e:	4618      	mov	r0, r3
 8005530:	f000 f8fd 	bl	800572e <TIM_ITRx_SetConfig>
      break;
 8005534:	e02b      	b.n	800558e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	6859      	ldr	r1, [r3, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	461a      	mov	r2, r3
 8005544:	f000 f8c3 	bl	80056ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2160      	movs	r1, #96	; 0x60
 800554e:	4618      	mov	r0, r3
 8005550:	f000 f8ed 	bl	800572e <TIM_ITRx_SetConfig>
      break;
 8005554:	e01b      	b.n	800558e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6818      	ldr	r0, [r3, #0]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	6859      	ldr	r1, [r3, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	461a      	mov	r2, r3
 8005564:	f000 f884 	bl	8005670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2140      	movs	r1, #64	; 0x40
 800556e:	4618      	mov	r0, r3
 8005570:	f000 f8dd 	bl	800572e <TIM_ITRx_SetConfig>
      break;
 8005574:	e00b      	b.n	800558e <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4619      	mov	r1, r3
 8005580:	4610      	mov	r0, r2
 8005582:	f000 f8d4 	bl	800572e <TIM_ITRx_SetConfig>
        break;
 8005586:	e002      	b.n	800558e <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005588:	bf00      	nop
 800558a:	e000      	b.n	800558e <HAL_TIM_ConfigClockSource+0x172>
      break;
 800558c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a2a      	ldr	r2, [pc, #168]	; (8005664 <TIM_Base_SetConfig+0xbc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d003      	beq.n	80055c8 <TIM_Base_SetConfig+0x20>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c6:	d108      	bne.n	80055da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a21      	ldr	r2, [pc, #132]	; (8005664 <TIM_Base_SetConfig+0xbc>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d00b      	beq.n	80055fa <TIM_Base_SetConfig+0x52>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e8:	d007      	beq.n	80055fa <TIM_Base_SetConfig+0x52>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a1e      	ldr	r2, [pc, #120]	; (8005668 <TIM_Base_SetConfig+0xc0>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d003      	beq.n	80055fa <TIM_Base_SetConfig+0x52>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a1d      	ldr	r2, [pc, #116]	; (800566c <TIM_Base_SetConfig+0xc4>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d108      	bne.n	800560c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a0c      	ldr	r2, [pc, #48]	; (8005664 <TIM_Base_SetConfig+0xbc>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d007      	beq.n	8005648 <TIM_Base_SetConfig+0xa0>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a0b      	ldr	r2, [pc, #44]	; (8005668 <TIM_Base_SetConfig+0xc0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d003      	beq.n	8005648 <TIM_Base_SetConfig+0xa0>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a0a      	ldr	r2, [pc, #40]	; (800566c <TIM_Base_SetConfig+0xc4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d103      	bne.n	8005650 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	691a      	ldr	r2, [r3, #16]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	615a      	str	r2, [r3, #20]
}
 8005656:	bf00      	nop
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	40012c00 	.word	0x40012c00
 8005668:	40014400 	.word	0x40014400
 800566c:	40014800 	.word	0x40014800

08005670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	f023 0201 	bic.w	r2, r3, #1
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800569a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f023 030a 	bic.w	r3, r3, #10
 80056ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	621a      	str	r2, [r3, #32]
}
 80056c2:	bf00      	nop
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b087      	sub	sp, #28
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	f023 0210 	bic.w	r2, r3, #16
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	031b      	lsls	r3, r3, #12
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800570a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	621a      	str	r2, [r3, #32]
}
 8005722:	bf00      	nop
 8005724:	371c      	adds	r7, #28
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800572e:	b480      	push	{r7}
 8005730:	b085      	sub	sp, #20
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005748:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	f043 0307 	orr.w	r3, r3, #7
 8005754:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	609a      	str	r2, [r3, #8]
}
 800575c:	bf00      	nop
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005782:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	021a      	lsls	r2, r3, #8
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	431a      	orrs	r2, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4313      	orrs	r3, r2
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	4313      	orrs	r3, r2
 8005794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	609a      	str	r2, [r3, #8]
}
 800579c:	bf00      	nop
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057bc:	2302      	movs	r3, #2
 80057be:	e04a      	b.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a1f      	ldr	r2, [pc, #124]	; (8005864 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d108      	bne.n	80057fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a12      	ldr	r2, [pc, #72]	; (8005864 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d004      	beq.n	800582a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005828:	d10c      	bne.n	8005844 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005830:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	4313      	orrs	r3, r2
 800583a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	40012c00 	.word	0x40012c00

08005868 <LL_RCC_GetUSARTClockSource>:
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005874:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4013      	ands	r3, r2
}
 800587c:	4618      	mov	r0, r3
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <LL_RCC_GetLPUARTClockSource>:
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005894:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4013      	ands	r3, r2
}
 800589c:	4618      	mov	r0, r3
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e042      	b.n	8005940 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d106      	bne.n	80058d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7fb fc13 	bl	80010f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2224      	movs	r2, #36	; 0x24
 80058d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0201 	bic.w	r2, r2, #1
 80058e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f82c 	bl	8005948 <UART_SetConfig>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d101      	bne.n	80058fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e022      	b.n	8005940 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fa26 	bl	8005d54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005916:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689a      	ldr	r2, [r3, #8]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005926:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0201 	orr.w	r2, r2, #1
 8005936:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 faad 	bl	8005e98 <UART_CheckIdleState>
 800593e:	4603      	mov	r3, r0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005948:	b5b0      	push	{r4, r5, r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	4313      	orrs	r3, r2
 800596a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	4ba3      	ldr	r3, [pc, #652]	; (8005c00 <UART_SetConfig+0x2b8>)
 8005974:	4013      	ands	r3, r2
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	6812      	ldr	r2, [r2, #0]
 800597a:	69f9      	ldr	r1, [r7, #28]
 800597c:	430b      	orrs	r3, r1
 800597e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a98      	ldr	r2, [pc, #608]	; (8005c04 <UART_SetConfig+0x2bc>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	69fa      	ldr	r2, [r7, #28]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80059ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	69f9      	ldr	r1, [r7, #28]
 80059c4:	430b      	orrs	r3, r1
 80059c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ce:	f023 010f 	bic.w	r1, r3, #15
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a89      	ldr	r2, [pc, #548]	; (8005c08 <UART_SetConfig+0x2c0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d120      	bne.n	8005a2a <UART_SetConfig+0xe2>
 80059e8:	2003      	movs	r0, #3
 80059ea:	f7ff ff3d 	bl	8005868 <LL_RCC_GetUSARTClockSource>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	d817      	bhi.n	8005a24 <UART_SetConfig+0xdc>
 80059f4:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <UART_SetConfig+0xb4>)
 80059f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fa:	bf00      	nop
 80059fc:	08005a0d 	.word	0x08005a0d
 8005a00:	08005a19 	.word	0x08005a19
 8005a04:	08005a13 	.word	0x08005a13
 8005a08:	08005a1f 	.word	0x08005a1f
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	76fb      	strb	r3, [r7, #27]
 8005a10:	e038      	b.n	8005a84 <UART_SetConfig+0x13c>
 8005a12:	2302      	movs	r3, #2
 8005a14:	76fb      	strb	r3, [r7, #27]
 8005a16:	e035      	b.n	8005a84 <UART_SetConfig+0x13c>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	76fb      	strb	r3, [r7, #27]
 8005a1c:	e032      	b.n	8005a84 <UART_SetConfig+0x13c>
 8005a1e:	2308      	movs	r3, #8
 8005a20:	76fb      	strb	r3, [r7, #27]
 8005a22:	e02f      	b.n	8005a84 <UART_SetConfig+0x13c>
 8005a24:	2310      	movs	r3, #16
 8005a26:	76fb      	strb	r3, [r7, #27]
 8005a28:	e02c      	b.n	8005a84 <UART_SetConfig+0x13c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a75      	ldr	r2, [pc, #468]	; (8005c04 <UART_SetConfig+0x2bc>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d125      	bne.n	8005a80 <UART_SetConfig+0x138>
 8005a34:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005a38:	f7ff ff26 	bl	8005888 <LL_RCC_GetLPUARTClockSource>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a42:	d017      	beq.n	8005a74 <UART_SetConfig+0x12c>
 8005a44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a48:	d817      	bhi.n	8005a7a <UART_SetConfig+0x132>
 8005a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a4e:	d00b      	beq.n	8005a68 <UART_SetConfig+0x120>
 8005a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a54:	d811      	bhi.n	8005a7a <UART_SetConfig+0x132>
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <UART_SetConfig+0x11a>
 8005a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a5e:	d006      	beq.n	8005a6e <UART_SetConfig+0x126>
 8005a60:	e00b      	b.n	8005a7a <UART_SetConfig+0x132>
 8005a62:	2300      	movs	r3, #0
 8005a64:	76fb      	strb	r3, [r7, #27]
 8005a66:	e00d      	b.n	8005a84 <UART_SetConfig+0x13c>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	76fb      	strb	r3, [r7, #27]
 8005a6c:	e00a      	b.n	8005a84 <UART_SetConfig+0x13c>
 8005a6e:	2304      	movs	r3, #4
 8005a70:	76fb      	strb	r3, [r7, #27]
 8005a72:	e007      	b.n	8005a84 <UART_SetConfig+0x13c>
 8005a74:	2308      	movs	r3, #8
 8005a76:	76fb      	strb	r3, [r7, #27]
 8005a78:	e004      	b.n	8005a84 <UART_SetConfig+0x13c>
 8005a7a:	2310      	movs	r3, #16
 8005a7c:	76fb      	strb	r3, [r7, #27]
 8005a7e:	e001      	b.n	8005a84 <UART_SetConfig+0x13c>
 8005a80:	2310      	movs	r3, #16
 8005a82:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a5e      	ldr	r2, [pc, #376]	; (8005c04 <UART_SetConfig+0x2bc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	f040 808b 	bne.w	8005ba6 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a90:	7efb      	ldrb	r3, [r7, #27]
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	d823      	bhi.n	8005ade <UART_SetConfig+0x196>
 8005a96:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <UART_SetConfig+0x154>)
 8005a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9c:	08005ac1 	.word	0x08005ac1
 8005aa0:	08005adf 	.word	0x08005adf
 8005aa4:	08005ac9 	.word	0x08005ac9
 8005aa8:	08005adf 	.word	0x08005adf
 8005aac:	08005acf 	.word	0x08005acf
 8005ab0:	08005adf 	.word	0x08005adf
 8005ab4:	08005adf 	.word	0x08005adf
 8005ab8:	08005adf 	.word	0x08005adf
 8005abc:	08005ad7 	.word	0x08005ad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac0:	f7fe fef2 	bl	80048a8 <HAL_RCC_GetPCLK1Freq>
 8005ac4:	6178      	str	r0, [r7, #20]
        break;
 8005ac6:	e00f      	b.n	8005ae8 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ac8:	4b50      	ldr	r3, [pc, #320]	; (8005c0c <UART_SetConfig+0x2c4>)
 8005aca:	617b      	str	r3, [r7, #20]
        break;
 8005acc:	e00c      	b.n	8005ae8 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ace:	f7fe fe6b 	bl	80047a8 <HAL_RCC_GetSysClockFreq>
 8005ad2:	6178      	str	r0, [r7, #20]
        break;
 8005ad4:	e008      	b.n	8005ae8 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ada:	617b      	str	r3, [r7, #20]
        break;
 8005adc:	e004      	b.n	8005ae8 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	76bb      	strb	r3, [r7, #26]
        break;
 8005ae6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 811a 	beq.w	8005d24 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	4a46      	ldr	r2, [pc, #280]	; (8005c10 <UART_SetConfig+0x2c8>)
 8005af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005afa:	461a      	mov	r2, r3
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b02:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	4413      	add	r3, r2
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d305      	bcc.n	8005b20 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d902      	bls.n	8005b26 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	76bb      	strb	r3, [r7, #26]
 8005b24:	e0fe      	b.n	8005d24 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f04f 0100 	mov.w	r1, #0
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	4a37      	ldr	r2, [pc, #220]	; (8005c10 <UART_SetConfig+0x2c8>)
 8005b34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	f04f 0300 	mov.w	r3, #0
 8005b3e:	f7fa fb25 	bl	800018c <__aeabi_uldivmod>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4610      	mov	r0, r2
 8005b48:	4619      	mov	r1, r3
 8005b4a:	f04f 0200 	mov.w	r2, #0
 8005b4e:	f04f 0300 	mov.w	r3, #0
 8005b52:	020b      	lsls	r3, r1, #8
 8005b54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b58:	0202      	lsls	r2, r0, #8
 8005b5a:	6879      	ldr	r1, [r7, #4]
 8005b5c:	6849      	ldr	r1, [r1, #4]
 8005b5e:	0849      	lsrs	r1, r1, #1
 8005b60:	4608      	mov	r0, r1
 8005b62:	f04f 0100 	mov.w	r1, #0
 8005b66:	1814      	adds	r4, r2, r0
 8005b68:	eb43 0501 	adc.w	r5, r3, r1
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	461a      	mov	r2, r3
 8005b72:	f04f 0300 	mov.w	r3, #0
 8005b76:	4620      	mov	r0, r4
 8005b78:	4629      	mov	r1, r5
 8005b7a:	f7fa fb07 	bl	800018c <__aeabi_uldivmod>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4613      	mov	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b8c:	d308      	bcc.n	8005ba0 <UART_SetConfig+0x258>
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b94:	d204      	bcs.n	8005ba0 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	60da      	str	r2, [r3, #12]
 8005b9e:	e0c1      	b.n	8005d24 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	76bb      	strb	r3, [r7, #26]
 8005ba4:	e0be      	b.n	8005d24 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bae:	d16a      	bne.n	8005c86 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005bb0:	7efb      	ldrb	r3, [r7, #27]
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	2b07      	cmp	r3, #7
 8005bb6:	d82d      	bhi.n	8005c14 <UART_SetConfig+0x2cc>
 8005bb8:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <UART_SetConfig+0x278>)
 8005bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbe:	bf00      	nop
 8005bc0:	08005be1 	.word	0x08005be1
 8005bc4:	08005be9 	.word	0x08005be9
 8005bc8:	08005c15 	.word	0x08005c15
 8005bcc:	08005bef 	.word	0x08005bef
 8005bd0:	08005c15 	.word	0x08005c15
 8005bd4:	08005c15 	.word	0x08005c15
 8005bd8:	08005c15 	.word	0x08005c15
 8005bdc:	08005bf7 	.word	0x08005bf7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005be0:	f7fe fe78 	bl	80048d4 <HAL_RCC_GetPCLK2Freq>
 8005be4:	6178      	str	r0, [r7, #20]
        break;
 8005be6:	e01a      	b.n	8005c1e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005be8:	4b08      	ldr	r3, [pc, #32]	; (8005c0c <UART_SetConfig+0x2c4>)
 8005bea:	617b      	str	r3, [r7, #20]
        break;
 8005bec:	e017      	b.n	8005c1e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bee:	f7fe fddb 	bl	80047a8 <HAL_RCC_GetSysClockFreq>
 8005bf2:	6178      	str	r0, [r7, #20]
        break;
 8005bf4:	e013      	b.n	8005c1e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bfa:	617b      	str	r3, [r7, #20]
        break;
 8005bfc:	e00f      	b.n	8005c1e <UART_SetConfig+0x2d6>
 8005bfe:	bf00      	nop
 8005c00:	cfff69f3 	.word	0xcfff69f3
 8005c04:	40008000 	.word	0x40008000
 8005c08:	40013800 	.word	0x40013800
 8005c0c:	00f42400 	.word	0x00f42400
 8005c10:	080064d4 	.word	0x080064d4
      default:
        pclk = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	76bb      	strb	r3, [r7, #26]
        break;
 8005c1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d07f      	beq.n	8005d24 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	4a48      	ldr	r2, [pc, #288]	; (8005d4c <UART_SetConfig+0x404>)
 8005c2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c36:	005a      	lsls	r2, r3, #1
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	085b      	lsrs	r3, r3, #1
 8005c3e:	441a      	add	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2b0f      	cmp	r3, #15
 8005c50:	d916      	bls.n	8005c80 <UART_SetConfig+0x338>
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c58:	d212      	bcs.n	8005c80 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	f023 030f 	bic.w	r3, r3, #15
 8005c62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	085b      	lsrs	r3, r3, #1
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	f003 0307 	and.w	r3, r3, #7
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	89fb      	ldrh	r3, [r7, #14]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	89fa      	ldrh	r2, [r7, #14]
 8005c7c:	60da      	str	r2, [r3, #12]
 8005c7e:	e051      	b.n	8005d24 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	76bb      	strb	r3, [r7, #26]
 8005c84:	e04e      	b.n	8005d24 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c86:	7efb      	ldrb	r3, [r7, #27]
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	2b07      	cmp	r3, #7
 8005c8c:	d821      	bhi.n	8005cd2 <UART_SetConfig+0x38a>
 8005c8e:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <UART_SetConfig+0x34c>)
 8005c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c94:	08005cb5 	.word	0x08005cb5
 8005c98:	08005cbd 	.word	0x08005cbd
 8005c9c:	08005cd3 	.word	0x08005cd3
 8005ca0:	08005cc3 	.word	0x08005cc3
 8005ca4:	08005cd3 	.word	0x08005cd3
 8005ca8:	08005cd3 	.word	0x08005cd3
 8005cac:	08005cd3 	.word	0x08005cd3
 8005cb0:	08005ccb 	.word	0x08005ccb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cb4:	f7fe fe0e 	bl	80048d4 <HAL_RCC_GetPCLK2Freq>
 8005cb8:	6178      	str	r0, [r7, #20]
        break;
 8005cba:	e00f      	b.n	8005cdc <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cbc:	4b24      	ldr	r3, [pc, #144]	; (8005d50 <UART_SetConfig+0x408>)
 8005cbe:	617b      	str	r3, [r7, #20]
        break;
 8005cc0:	e00c      	b.n	8005cdc <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cc2:	f7fe fd71 	bl	80047a8 <HAL_RCC_GetSysClockFreq>
 8005cc6:	6178      	str	r0, [r7, #20]
        break;
 8005cc8:	e008      	b.n	8005cdc <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cce:	617b      	str	r3, [r7, #20]
        break;
 8005cd0:	e004      	b.n	8005cdc <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	76bb      	strb	r3, [r7, #26]
        break;
 8005cda:	bf00      	nop
    }

    if (pclk != 0U)
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d020      	beq.n	8005d24 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	4a19      	ldr	r2, [pc, #100]	; (8005d4c <UART_SetConfig+0x404>)
 8005ce8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cec:	461a      	mov	r2, r3
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	085b      	lsrs	r3, r3, #1
 8005cfa:	441a      	add	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	2b0f      	cmp	r3, #15
 8005d0c:	d908      	bls.n	8005d20 <UART_SetConfig+0x3d8>
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d14:	d204      	bcs.n	8005d20 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	60da      	str	r2, [r3, #12]
 8005d1e:	e001      	b.n	8005d24 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005d40:	7ebb      	ldrb	r3, [r7, #26]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3720      	adds	r7, #32
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bdb0      	pop	{r4, r5, r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	080064d4 	.word	0x080064d4
 8005d50:	00f42400 	.word	0x00f42400

08005d54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00a      	beq.n	8005d7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da4:	f003 0304 	and.w	r3, r3, #4
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00a      	beq.n	8005dc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc6:	f003 0308 	and.w	r3, r3, #8
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00a      	beq.n	8005de4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de8:	f003 0310 	and.w	r3, r3, #16
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00a      	beq.n	8005e06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01a      	beq.n	8005e6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e52:	d10a      	bne.n	8005e6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	605a      	str	r2, [r3, #4]
  }
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af02      	add	r7, sp, #8
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ea8:	f7fb fab2 	bl	8001410 <HAL_GetTick>
 8005eac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d10e      	bne.n	8005eda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ebc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f82f 	bl	8005f2e <UART_WaitOnFlagUntilTimeout>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e025      	b.n	8005f26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d10e      	bne.n	8005f06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ee8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f819 	bl	8005f2e <UART_WaitOnFlagUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e00f      	b.n	8005f26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2220      	movs	r2, #32
 8005f12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	603b      	str	r3, [r7, #0]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f3e:	e062      	b.n	8006006 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f46:	d05e      	beq.n	8006006 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f48:	f7fb fa62 	bl	8001410 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d302      	bcc.n	8005f5e <UART_WaitOnFlagUntilTimeout+0x30>
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d11d      	bne.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f6c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 0201 	bic.w	r2, r2, #1
 8005f7c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e045      	b.n	8006026 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0304 	and.w	r3, r3, #4
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d02e      	beq.n	8006006 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fb6:	d126      	bne.n	8006006 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fc0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fd0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0201 	bic.w	r2, r2, #1
 8005fe0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2220      	movs	r2, #32
 8005fee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e00f      	b.n	8006026 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	69da      	ldr	r2, [r3, #28]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	4013      	ands	r3, r2
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	429a      	cmp	r2, r3
 8006014:	bf0c      	ite	eq
 8006016:	2301      	moveq	r3, #1
 8006018:	2300      	movne	r3, #0
 800601a:	b2db      	uxtb	r3, r3
 800601c:	461a      	mov	r2, r3
 800601e:	79fb      	ldrb	r3, [r7, #7]
 8006020:	429a      	cmp	r2, r3
 8006022:	d08d      	beq.n	8005f40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800602e:	b480      	push	{r7}
 8006030:	b085      	sub	sp, #20
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_UARTEx_DisableFifoMode+0x16>
 8006040:	2302      	movs	r3, #2
 8006042:	e027      	b.n	8006094 <HAL_UARTEx_DisableFifoMode+0x66>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2224      	movs	r2, #36	; 0x24
 8006050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0201 	bic.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006072:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d101      	bne.n	80060b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060b4:	2302      	movs	r3, #2
 80060b6:	e02d      	b.n	8006114 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2224      	movs	r2, #36	; 0x24
 80060c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0201 	bic.w	r2, r2, #1
 80060de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f84f 	bl	8006198 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2220      	movs	r2, #32
 8006106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006130:	2302      	movs	r3, #2
 8006132:	e02d      	b.n	8006190 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2224      	movs	r2, #36	; 0x24
 8006140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 0201 	bic.w	r2, r2, #1
 800615a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f811 	bl	8006198 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2220      	movs	r2, #32
 8006182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d108      	bne.n	80061ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061b8:	e031      	b.n	800621e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061ba:	2308      	movs	r3, #8
 80061bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061be:	2308      	movs	r3, #8
 80061c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	0e5b      	lsrs	r3, r3, #25
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	0f5b      	lsrs	r3, r3, #29
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	f003 0307 	and.w	r3, r3, #7
 80061e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061e2:	7bbb      	ldrb	r3, [r7, #14]
 80061e4:	7b3a      	ldrb	r2, [r7, #12]
 80061e6:	4911      	ldr	r1, [pc, #68]	; (800622c <UARTEx_SetNbDataToProcess+0x94>)
 80061e8:	5c8a      	ldrb	r2, [r1, r2]
 80061ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80061ee:	7b3a      	ldrb	r2, [r7, #12]
 80061f0:	490f      	ldr	r1, [pc, #60]	; (8006230 <UARTEx_SetNbDataToProcess+0x98>)
 80061f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	7b7a      	ldrb	r2, [r7, #13]
 8006204:	4909      	ldr	r1, [pc, #36]	; (800622c <UARTEx_SetNbDataToProcess+0x94>)
 8006206:	5c8a      	ldrb	r2, [r1, r2]
 8006208:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800620c:	7b7a      	ldrb	r2, [r7, #13]
 800620e:	4908      	ldr	r1, [pc, #32]	; (8006230 <UARTEx_SetNbDataToProcess+0x98>)
 8006210:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006212:	fb93 f3f2 	sdiv	r3, r3, r2
 8006216:	b29a      	uxth	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800621e:	bf00      	nop
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	080064ec 	.word	0x080064ec
 8006230:	080064f4 	.word	0x080064f4

08006234 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800623c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006240:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006248:	b29a      	uxth	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	b29b      	uxth	r3, r3
 800624e:	43db      	mvns	r3, r3
 8006250:	b29b      	uxth	r3, r3
 8006252:	4013      	ands	r3, r2
 8006254:	b29a      	uxth	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800626a:	b084      	sub	sp, #16
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	f107 0014 	add.w	r0, r7, #20
 8006278:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	b004      	add	sp, #16
 80062aa:	4770      	bx	lr

080062ac <__libc_init_array>:
 80062ac:	b570      	push	{r4, r5, r6, lr}
 80062ae:	4d0d      	ldr	r5, [pc, #52]	; (80062e4 <__libc_init_array+0x38>)
 80062b0:	4c0d      	ldr	r4, [pc, #52]	; (80062e8 <__libc_init_array+0x3c>)
 80062b2:	1b64      	subs	r4, r4, r5
 80062b4:	10a4      	asrs	r4, r4, #2
 80062b6:	2600      	movs	r6, #0
 80062b8:	42a6      	cmp	r6, r4
 80062ba:	d109      	bne.n	80062d0 <__libc_init_array+0x24>
 80062bc:	4d0b      	ldr	r5, [pc, #44]	; (80062ec <__libc_init_array+0x40>)
 80062be:	4c0c      	ldr	r4, [pc, #48]	; (80062f0 <__libc_init_array+0x44>)
 80062c0:	f000 f87c 	bl	80063bc <_init>
 80062c4:	1b64      	subs	r4, r4, r5
 80062c6:	10a4      	asrs	r4, r4, #2
 80062c8:	2600      	movs	r6, #0
 80062ca:	42a6      	cmp	r6, r4
 80062cc:	d105      	bne.n	80062da <__libc_init_array+0x2e>
 80062ce:	bd70      	pop	{r4, r5, r6, pc}
 80062d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062d4:	4798      	blx	r3
 80062d6:	3601      	adds	r6, #1
 80062d8:	e7ee      	b.n	80062b8 <__libc_init_array+0xc>
 80062da:	f855 3b04 	ldr.w	r3, [r5], #4
 80062de:	4798      	blx	r3
 80062e0:	3601      	adds	r6, #1
 80062e2:	e7f2      	b.n	80062ca <__libc_init_array+0x1e>
 80062e4:	0800652c 	.word	0x0800652c
 80062e8:	0800652c 	.word	0x0800652c
 80062ec:	0800652c 	.word	0x0800652c
 80062f0:	08006530 	.word	0x08006530

080062f4 <__itoa>:
 80062f4:	1e93      	subs	r3, r2, #2
 80062f6:	2b22      	cmp	r3, #34	; 0x22
 80062f8:	b510      	push	{r4, lr}
 80062fa:	460c      	mov	r4, r1
 80062fc:	d904      	bls.n	8006308 <__itoa+0x14>
 80062fe:	2300      	movs	r3, #0
 8006300:	700b      	strb	r3, [r1, #0]
 8006302:	461c      	mov	r4, r3
 8006304:	4620      	mov	r0, r4
 8006306:	bd10      	pop	{r4, pc}
 8006308:	2a0a      	cmp	r2, #10
 800630a:	d109      	bne.n	8006320 <__itoa+0x2c>
 800630c:	2800      	cmp	r0, #0
 800630e:	da07      	bge.n	8006320 <__itoa+0x2c>
 8006310:	232d      	movs	r3, #45	; 0x2d
 8006312:	700b      	strb	r3, [r1, #0]
 8006314:	4240      	negs	r0, r0
 8006316:	2101      	movs	r1, #1
 8006318:	4421      	add	r1, r4
 800631a:	f000 f80d 	bl	8006338 <__utoa>
 800631e:	e7f1      	b.n	8006304 <__itoa+0x10>
 8006320:	2100      	movs	r1, #0
 8006322:	e7f9      	b.n	8006318 <__itoa+0x24>

08006324 <itoa>:
 8006324:	f7ff bfe6 	b.w	80062f4 <__itoa>

08006328 <memset>:
 8006328:	4402      	add	r2, r0
 800632a:	4603      	mov	r3, r0
 800632c:	4293      	cmp	r3, r2
 800632e:	d100      	bne.n	8006332 <memset+0xa>
 8006330:	4770      	bx	lr
 8006332:	f803 1b01 	strb.w	r1, [r3], #1
 8006336:	e7f9      	b.n	800632c <memset+0x4>

08006338 <__utoa>:
 8006338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800633a:	4c1f      	ldr	r4, [pc, #124]	; (80063b8 <__utoa+0x80>)
 800633c:	b08b      	sub	sp, #44	; 0x2c
 800633e:	4605      	mov	r5, r0
 8006340:	460b      	mov	r3, r1
 8006342:	466e      	mov	r6, sp
 8006344:	f104 0c20 	add.w	ip, r4, #32
 8006348:	6820      	ldr	r0, [r4, #0]
 800634a:	6861      	ldr	r1, [r4, #4]
 800634c:	4637      	mov	r7, r6
 800634e:	c703      	stmia	r7!, {r0, r1}
 8006350:	3408      	adds	r4, #8
 8006352:	4564      	cmp	r4, ip
 8006354:	463e      	mov	r6, r7
 8006356:	d1f7      	bne.n	8006348 <__utoa+0x10>
 8006358:	7921      	ldrb	r1, [r4, #4]
 800635a:	7139      	strb	r1, [r7, #4]
 800635c:	1e91      	subs	r1, r2, #2
 800635e:	6820      	ldr	r0, [r4, #0]
 8006360:	6038      	str	r0, [r7, #0]
 8006362:	2922      	cmp	r1, #34	; 0x22
 8006364:	f04f 0100 	mov.w	r1, #0
 8006368:	d904      	bls.n	8006374 <__utoa+0x3c>
 800636a:	7019      	strb	r1, [r3, #0]
 800636c:	460b      	mov	r3, r1
 800636e:	4618      	mov	r0, r3
 8006370:	b00b      	add	sp, #44	; 0x2c
 8006372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006374:	1e58      	subs	r0, r3, #1
 8006376:	4684      	mov	ip, r0
 8006378:	fbb5 f7f2 	udiv	r7, r5, r2
 800637c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006380:	fb02 5617 	mls	r6, r2, r7, r5
 8006384:	4476      	add	r6, lr
 8006386:	460c      	mov	r4, r1
 8006388:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800638c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006390:	462e      	mov	r6, r5
 8006392:	42b2      	cmp	r2, r6
 8006394:	f101 0101 	add.w	r1, r1, #1
 8006398:	463d      	mov	r5, r7
 800639a:	d9ed      	bls.n	8006378 <__utoa+0x40>
 800639c:	2200      	movs	r2, #0
 800639e:	545a      	strb	r2, [r3, r1]
 80063a0:	1919      	adds	r1, r3, r4
 80063a2:	1aa5      	subs	r5, r4, r2
 80063a4:	42aa      	cmp	r2, r5
 80063a6:	dae2      	bge.n	800636e <__utoa+0x36>
 80063a8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80063ac:	780e      	ldrb	r6, [r1, #0]
 80063ae:	7006      	strb	r6, [r0, #0]
 80063b0:	3201      	adds	r2, #1
 80063b2:	f801 5901 	strb.w	r5, [r1], #-1
 80063b6:	e7f4      	b.n	80063a2 <__utoa+0x6a>
 80063b8:	080064fc 	.word	0x080064fc

080063bc <_init>:
 80063bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063be:	bf00      	nop
 80063c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063c2:	bc08      	pop	{r3}
 80063c4:	469e      	mov	lr, r3
 80063c6:	4770      	bx	lr

080063c8 <_fini>:
 80063c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ca:	bf00      	nop
 80063cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ce:	bc08      	pop	{r3}
 80063d0:	469e      	mov	lr, r3
 80063d2:	4770      	bx	lr
